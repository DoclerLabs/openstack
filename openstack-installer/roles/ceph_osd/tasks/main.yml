---

- name: install ceph packages
  apt: name={{ item }} state=present
  with_items:
    - ceph

- name: fetch or generate the uuid of the cluster
  shell: "monmaptool --print /etc/ceph/monmap | grep fsid | cut -d' ' -f2"
  delegate_to: "{{ groups['ceph_monitor'][0] }}"
  register: ceph_fsid
  run_once: True

- name: generate ceph config file
  ini_file: dest=/etc/ceph/ceph.conf
    section=global
    option="{{ item.key }}"
    value="{{ item.value }}"
  with_dict:
    { "fsid": "{{ ceph_fsid.stdout }}",
      "mon initial members": "{{ groups['ceph_monitor'] | join(',') }}",
      "mon host": "{% for host in groups['ceph_monitor'] %}{{ hostvars[host].ip.mgmt }}{% if not loop.last %},{% endif %}{% endfor %}",
      "auth cluster required": "cephx",
      "auth service required": "cephx",
      "auth client required": "cephx",
      "cephx require signatures": "true",
      "osd journal size": "{{ ceph_osd_journal_size }}",
      "filestore xattr use omap": "{{ ceph_filestore_xattr_use_omap }}",
      "osd pool default size": "{{ ceph_osd_pool_default_size }}",
      "osd pool default min size": "{{ ceph_osd_pool_default_min_size }}",
      "osd crush chooseleaf type": "{{ ceph_osd_crush_chooseleaf_type }}",
      "osd max attr size": "{{ ceph_osd_max_attr_size }}",
      "osd heartbeat grace": "{{ ceph_osd_heartbeat_grace }}",
      "osd heartbeat interval": "{{ ceph_osd_heartbeat_interval }}",
      "osd mon heartbeat interval": "{{ ceph_osd_mon_heartbeat_interval }}",
      "osd mon report interval max": "{{ ceph_osd_mon_report_interval_max }}",
      "osd mon report interval min": "{{ ceph_osd_mon_report_interval_min }}",
      "osd mon ack timeout": "{{ ceph_osd_mon_ack_timeout }}",
      "osd op threads": "{{ ceph_osd_op_threads }}",
      "osd client op priority": "{{ ceph_osd_client_op_priority }}",
      "osd recovery op priority": "{{ ceph_osd_recovery_op_priority }}",
      "osd scrub load threshold": "{{ ceph_osd_scrub_load_threshold }}",
      "osd recovery max active": "{{ ceph_osd_recovery_max_active }}",
      "osd max backfills": "{{ ceph_osd_max_backfills }}",
      "osd recovery max single start": "{{ ceph_osd_recovery_max_single_start }}",
      "osd max object name len": "{{ ceph_osd_max_object_name_len }}"
   }

- name: set up ceph public network
  ini_file: dest=/etc/ceph/ceph.conf
    section=global
    option="public network"
    value="{{ ceph_public_network }}"
  when: ceph_public_network is defined

- name: set up ceph cluster network
  ini_file: dest=/etc/ceph/ceph.conf
    section=global
    option="cluster network"
    value="{{ ceph_cluster_network }}"
  when: ceph_cluster_network is defined

- name: fetch the bootstrap-osd key
  command: ceph auth print-key client.bootstrap-osd
  register: bootstrap_osd_key_results
  until: bootstrap_osd_key_results | success
  delay: 5
  retries: 5
  delegate_to: "{{ groups['ceph_monitor'][0] }}"
  run_once: True

- name: distribute the bootstrap-osd keyring
  copy: content="[client.bootstrap-osd]\n\tkey = {{ bootstrap_osd_key_results.stdout }}\n"
        dest=/var/lib/ceph/bootstrap-osd/ceph.keyring owner=root group=root mode=0600

### Add path-based OSDs
- name: make sure OSD directories are exists
  file: path={{ item.path }} state=directory owner=ceph group=root mode=0700
  with_items: "{{ osd }}"
  when: item.path is defined

- name: prepare disks
  command: ceph-disk prepare "{{ item.path }}"
  with_items: "{{ osd }}"
  when: item.path is defined

- name: activate disks
  command: ceph-disk activate "{{ item.path }}"
  with_items: "{{ osd }}"
  when: item.path is defined

- name: query local OSD IDs
  command: cat "{{ item.path }}/whoami"
  with_items: "{{ osd }}"
  changed_when: False
  register: osd_ids
  when: item.path is defined

- name: ensure ceph OSD is started (upstart)
  service: name=ceph-osd state=started enabled=yes args="id={{ item.stdout }} cluster={{ ceph_cluster_name }}"
  with_items: "{{ osd_ids.results }}"
  when: (item.skipped is not defined or item.skipped != True) and
        ansible_distribution_version | version_compare('15.04', '<=')

- name: ensure ceph OSD is started (systemd)
  service: name=ceph-osd@{{ item.stdout }} state=started enabled=yes
  with_items: "{{ osd_ids.results }}"
  when: (item.skipped is not defined or item.skipped != True) and
        ansible_distribution_version | version_compare('15.10', '>=')

### Add disk-based OSDs
- name: prepare disks
  command: ceph-disk prepare "{{ item.disk }}" {{ item.journal | default('') }}
  register: ceph_disk_status
  failed_when: ceph_disk_status.rc != 0 and ('Could not create partition 2' not in ceph_disk_status.stderr) and ('Device is mounted' not in ceph_disk_status.stderr)
  changed_when: ceph_disk_status.rc == 0
  with_items: "{{ osd }}"
  when: item.disk is defined

- name: activate disks
  command: ceph-disk activate "{{ item.disk }}1"
  with_items: "{{ osd }}"
  when: item.disk is defined
