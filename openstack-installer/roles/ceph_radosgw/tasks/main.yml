- name: install radosgw
  apt: name={{ item }}
  with_items:
    - apache2
    - radosgw
    - libnss3-tools

- name: set up rgw.conf in apache
  template: src=rgw.conf dest=/etc/apache2/conf-available/rgw.conf owner=root group=root mode=0644
  notify: restart apache2

- name: enable rgw.conf
  file: state=link dest=/etc/apache2/conf-enabled/rgw.conf src=../conf-available/rgw.conf
  notify: restart apache2

- name: enable apache modules
  file: state=link dest=/etc/apache2/mods-enabled/{{ item }}.load src=../mods-available/{{ item }}.load
  with_items:
    - rewrite
    - proxy
    - proxy_fcgi
  notify: restart apache2

- name: set up /etc/ceph/ceph.conf for radosgw
  ini_file: dest=/etc/ceph/ceph.conf
    section=client.radosgw.gateway
    option="{{ item.key }}"
    value="{{ item.value }}"
  with_dict:
    { "host" : "{{ inventory_hostname }}",
      "keyring": "/etc/ceph/ceph.client.radosgw.gateway.keyring",
      "rgw socket path": "''",
      "rgw frontends": "fastcgi socket_port=9000 socket_host=127.0.0.1",
      "log file": "/var/log/ceph/client.radosgw.gateway.log",
      "rgw print continue": "false",
      "rgw keystone url": "http://{{ ip.mgmt }}:5000",
      "rgw keystone admin token" : "{{ keystone_admin_token }}",
      "rgw keystone accepted roles": "{{ rgw_keystone_accepted_roles }}",
      "rgw keystone token cache size": 500,
      "rgw keystone revocation interval": 500,
      "rgw s3 auth use keystone": "true",
      "nss db path": "/var/lib/ceph/nss"
    }
  notify: restart radosgw

- name: make sure /var/lib/ceph/nss exists
  file: path=/var/lib/ceph/nss state=directory mode=0644 owner=root group=root

- name: convert keystone CA cert for radosgw use
  shell: 'openssl x509 -in /etc/keystone/ssl/certs/ca.pem -pubkey | certutil -d /var/lib/ceph/nss -A -n ca -t "TCu,Cu,Tuw"'

- name: convert keystone signing cert for radosgw use
  shell: 'openssl x509 -in /etc/keystone/ssl/certs/signing_cert.pem -pubkey | certutil -A -d /var/lib/ceph/nss -n signing_cert -t "P,P,P"'

- meta: flush_handlers

- name: make sure services are started
  service: name={{ item }} state=started
  with_items:
    - apache2
    - radosgw
