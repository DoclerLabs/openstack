---

- name: create cinder vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ cinder_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create cinder user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ cinder_rabbit_user }}" password="{{ cinder_rabbit_password }}"
      vhost="{{ cinder_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the cinder vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ cinder_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask autostarting of cinder services
  service_mask: name={{ item }} state=masked
  with_items:
    - cinder-api
    - cinder-scheduler
  when: inventory_hostname in groups['cinder']

- name: mask autostarting of cinder volume
  service_mask: name={{ item }} state=masked
  with_items:
    - cinder-volume
    - cinder-backup
  when: inventory_hostname in groups['cinder_volume']

- name: mask cinder-wsgi apache config
  copy: content='' dest=/etc/apache2/conf-available/cinder-wsgi.conf owner=root group=root mode=0644
  when: inventory_hostname in groups['cinder']

- name: install cinder
  apt: 
    name:
    - cinder-api
    - cinder-scheduler
    - python3-cinder
    - python3-cinderclient
  when: inventory_hostname in groups['cinder']

- name: install cinder-volume
  apt:
    name:
    - python3-rbd
    - python3-rados
    - python3-rtslib-fb
    - ceph-common
    - cinder-volume
    - cinder-backup
    - python3-cinder
    - python3-cinderclient
  when: inventory_hostname in groups['cinder_volume']

- name: ensure python-cinder is not installed
  apt: name=python-cinder state=absent

- name: ensure cinder-api service is disabled at boot
  service: name=cinder-api state=stopped enabled=no
  when: inventory_hostname in groups['cinder']

- name: create cinder database
  mysql_db: name={{ cinder_db }}
    login_host={{ cinder_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True

- name: create cinder database user
  mysql_user: name={{ cinder_db_user }} password={{ cinder_db_password }} host={{ item }} priv={{ cinder_db }}.*:ALL
    login_host={{ cinder_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True
  with_items:
    - localhost
    - '%'

- name: install cinder configs
  template: src={{ item }}.conf.j2 dest=/etc/cinder/{{ item }}.conf owner=cinder group=root mode=0460
  with_items:
    - cinder
  notify:
    - signal apache to reload
    - restart cinder-scheduler
    - restart cinder-volume

- name: sync cinder db
  command: su cinder -s /bin/sh -c "/usr/bin/cinder-manage db sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  run_once: True

- name: create /var/www/cgi-bin/cinder
  file: path=/var/www/cgi-bin/cinder state=directory owner=root group=root mode=0755
  when: inventory_hostname in groups['cinder']
  notify: signal apache to reload

- name: link cinder-wsgi server
  file: src=/usr/bin/cinder-wsgi dest=/var/www/cgi-bin/cinder/cinder-api state=link force=yes
  when: inventory_hostname in groups['cinder']
  notify: signal apache to reload

- name: unmask autostarting of cinder services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - cinder-scheduler
  when: inventory_hostname in groups['cinder']

- name: unmask autostarting of cinder volume
  service_mask: name={{ item }} state=unmasked
  with_items:
    - cinder-volume
    - cinder-backup
  when: inventory_hostname in groups['cinder_volume']

- meta: flush_handlers

- name: ensure cinder-scheduler is started
  service: name=cinder-scheduler state=started enabled=yes
  when: inventory_hostname in groups['cinder']

- name: ensure cinder-volume is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - cinder-volume
    - cinder-backup
  when: inventory_hostname in groups['cinder_volume']

- name: start/stop tgtd
  service: name=tgt
      state={{ (cinder_iscsi_helper == 'tgtadm') | ternary('started','stopped') }}
      enabled={{ cinder_iscsi_helper == 'tgtadm' }}
  when: inventory_hostname in groups['cinder_volume']
