---

- name: check for Ansible version >= 2.1
  local_action: assert that="{{ ansible_version.string is version_compare('2.1', '>=') }}"
  run_once: True
  become: False

- name: install packages for tempest
  become: True
  apt:
    name:
    - git
    - libssl-dev
    - python3-dev
    - python3-subunit
    - python3-shade
    - python3-glanceclient
    - python3-novaclient
    - python3-neutronclient
  when: ansible_os_family == 'Debian'

- name: make sure the images directory exists
  file: path="{{ tempest_images_dest }}" state=directory

- name: get image files
  get_url: url="{{ tempest_images_url }}/{{ item }}" dest="{{ tempest_images_dest }}/{{ item }}"
  with_items:
    - "{{ tempest_image_file }}"
    - "{{ tempest_image_ari_img_file }}"
    - "{{ tempest_image_aki_img_file }}"

- name: install tempest CA file
  copy: src='{{ SSLCACertificateFileSource }}' dest='{{ tempest_CAFile }}'
  when: SSLCACertificateFileSource is not none and SSLCACertificateFileSource | trim != ''

- name: ensure cirros image exists in Glance
  os_image:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: admin
      password: "{{ keystone_admin_password }}"
      domain-name: "{{ keystone_domain_name }}"
      project_name: admin
      project_domain_name: "{{ keystone_domain_name }}"
    cacert: "{{ tempest_CAFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: cirros-image
    container_format: bare
    disk_format: qcow2
    filename: "{{ tempest_images_dest }}/{{ tempest_image_file }}"
    is_public: True
    state: present
  run_once: True
  register: cirros_image

- name: ensure test flavors are exist
  os_nova_flavor:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: admin
      password: "{{ keystone_admin_password }}"
      domain-name: "{{ keystone_domain_name }}"
      project_name: admin
      project_domain_name: "{{ keystone_domain_name }}"
    cacert: "{{ tempest_CAFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: "{{ item.name }}"
    flavorid: "{{ item.id }}"
    disk: "{{ item.disk }}"
    ram: "{{ item.ram }}"
    ephemeral: "{{ item.ephemeral }}"
    vcpus: "{{ item.vcpus }}"
    state: present
  with_items:
    - {'name': 'm1.micro', 'id': 0, 'disk': 1, 'ram': 256, 'ephemeral': 0, 'vcpus': 1 }
    - {'name': 'm1.tiny', 'id': 1, 'disk': 1, 'ram': 512, 'ephemeral': 0, 'vcpus': 1 }

- name: ensure the heat stack owner project exists in keystone
  keystone_user: >
    login_project_name=admin
    login_user=admin
    login_domain_name="Default"
    login_password="{{ keystone_admin_password }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
    cacert={{ tempest_CAFile }}
    insecure={{ ssl_insecure | ternary("true", "false") }}
    project_domain="Default"
    project="{{ heat_stack_owner_project }}"
    project_description="Heat stack owner demo project"
  run_once: True

- name: ensure the heat stack owner user exists in keystone
  keystone_user: >
    login_project_name=admin
    login_user=admin
    login_domain_name="Default"
    login_password="{{ keystone_admin_password }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
    cacert={{ tempest_CAFile }}
    insecure={{ ssl_insecure | ternary("true", "false") }}
    project="{{ heat_stack_owner_project }}"
    project_domain="Default"
    user="{{ heat_stack_owner_user }}"
    user_domain="Default"
    password="{{ heat_stack_owner_password }}"
  run_once: True

- name: ensure the heat stack owner user has the correct role
  keystone_user: >
    login_project_name=admin
    login_user=admin
    login_domain_name="Default"
    login_password="{{ keystone_admin_password }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
    cacert={{ tempest_CAFile }}
    insecure={{ ssl_insecure | ternary("true", "false") }}
    project_domain="Default"
    project="{{ heat_stack_owner_project }}"
    user="{{ heat_stack_owner_user }}"
    user_domain="Default"
    role="heat_stack_owner"
  run_once: True

- name: ensure external network exists in neutron
  os_network:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: admin
      password: "{{ keystone_admin_password }}"
      domain-name: "{{ keystone_domain_name }}"
      project_name: admin
      project_domain_name: "{{ keystone_domain_name }}"
    cacert: "{{ tempest_CAFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: "{{ external_net_name }}"
    provider_network_type: "{{ external_net_type }}"
    provider_physical_network: "{{ external_physical_network }}"
    provider_segmentation_id: "{{ external_net_segmentation_id }}"
    external: True
    state: present
  run_once: True
  register: external_net

- name: set up external subnet in neutron
  os_subnet:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: admin
      password: "{{ keystone_admin_password }}"
      domain-name: "{{ keystone_domain_name }}"
      project_name: admin
      project_domain_name: "{{ keystone_domain_name }}"
    cacert: "{{ tempest_CAFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: external-subnet
    network_name: "{{ external_net_name }}"
    cidr: "{{ external_subnet_cidr }}"
    enable_dhcp: False
    gateway_ip: "{{ external_subnet_gateway_ip }}"
    allocation_pool_start: "{{ external_subnet_allocation_start }}"
    allocation_pool_end: "{{ external_subnet_allocation_end }}"
    state: present
  run_once: True

- name: get tempest from git
  git: dest={{ tempest_dest }}/tempest repo={{ tempest_git_repo }} version={{ tempest_version }}

- name: get tempest plugins
  git: dest={{ tempest_dest }}/{{ item.name }} repo={{ item.repo }} version={{ item.version }}
  when: groups[item.name] | length > 0
  with_items:
    - { name: "keystone", repo: "{{ tempest_keystone_git_repo }}", version: "{{ tempest_keystone_version }}" }
    - { name: "barbican", repo: "{{ tempest_barbican_git_repo }}", version: "{{ tempest_barbican_version }}" }
    - { name: "designate", repo: "{{ tempest_designate_git_repo }}", version: "{{ tempest_designate_version }}" }

- name: install tempest to virtualenv
  pip: name={{ tempest_dest }}/tempest virtualenv={{ tempest_dest }}/virtualenv

- name: install tempest plugins to virtualenv
  pip: name={{ tempest_dest }}/{{ item }} virtualenv={{ tempest_dest }}/virtualenv
  when: groups[item] | length > 0
  with_items:
    - keystone
    - barbican
    - designate

- name: install tempest config
  template: src=tempest.conf.j2 dest={{ tempest_dest }}/tempest/etc/tempest.conf
