---

- name: create murano vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ murano_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create murano user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ murano_rabbit_user }}" password="{{ murano_rabbit_password }}"
      vhost="{{ murano_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the murano vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ murano_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create murano vhost in rabbitmq for murano engine
  rabbitmq_vhost: node="rabbit@{{ murano_service_rabbit_servers[0] }}" name="{{ murano_service_rabbit_vhost }}"
  delegate_to: "{{ murano_service_rabbit_servers[0] }}"
  run_once: True
  when: murano_service_rabbit_servers | count > 0

- name: create murano user in rabbitmq for murano engine
  rabbitmq_user: node="rabbit@{{ murano_service_rabbit_servers[0] }}"
      user="{{ murano_service_rabbit_user }}" password="{{ murano_service_rabbit_password }}"
      vhost="{{ murano_service_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ murano_service_rabbit_servers[0] }}"
  run_once: True
  when: murano_service_rabbit_servers | count > 0

- name: ensure the murano vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ murano_service_rabbit_servers[0] }}"
    vhost: "{{ murano_service_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ murano_service_rabbit_servers[0] }}"
  run_once: True
  when: murano_service_rabbit_servers | count > 0

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask autostarting of murano
  service_mask: name={{ item }} state=masked
  with_items:
    - murano-api
    - murano-cfapi
    - murano-engine

- name: install murano
  apt:
    name:
    - python3-pymysql
    - python3-memcache
    - python3-murano
    - murano-api
    - murano-cfapi
    - murano-engine
    - python3-muranoclient

- name: ensure python-murano is not installed
  apt: name=python-murano state=absent

- name: create murano database
  mysql_db: name={{ murano_db }}
    login_host={{ murano_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True

- name: create murano database user
  mysql_user: name={{ murano_db_user }} password={{ murano_db_password }} host={{ item }} priv={{ murano_db }}.*:ALL
    login_host={{ murano_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True
  with_items:
    - localhost
    - '%'

- name: install murano configs
  template: src={{ item }}.conf.j2 dest=/etc/murano/{{ item }}.conf owner=murano group=root mode=0460
  with_items:
    - murano
  notify: restart murano

- name: ensure /var/lib/murano/cache is writeable
  file: path=/var/lib/murano/cache state=directory owner=murano group=murano mode=0700
  notify: restart murano

- name: sync murano db
  command: su murano -s /bin/sh -c 'murano-db-manage --config-file /etc/murano/murano.conf upgrade'
  run_once: True

- name: unmask autostarting of murano
  service_mask: name={{ item }} state=unmasked
  with_items:
    - murano-api
    - murano-cfapi
    - murano-engine

- meta: flush_handlers

- name: ensure murano is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - murano-api
    - murano-engine

- name: ensure murano-cfapi is stopped
  service: name=murano-cfapi enabled=no state=stopped
