---

- name: create keystone vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ keystone_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create keystone user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ keystone_rabbit_user }}" password="{{ keystone_rabbit_password }}"
      vhost="{{ keystone_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the keystone vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ keystone_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: mask autostarting of keystone
  service_mask: name=keystone state=masked

- name: make sure /etc/apache2/sites-available exists
  file: path=/etc/apache2/sites-available owner=root group=root mode=0755 state=directory

- name: mask keystone apache config
  copy: content='' dest=/etc/apache2/sites-available/keystone.conf owner=root group=root mode=0644

- name: install keystone
  apt:
    name:
    - rsync
    - keystone
    - python3-keystone
    - python3-openstackclient
    - python3-memcache

- name: ensure python-keystone is not installed
  apt: name=python-keystone state=absent

- name: ensure keystone service is disabled at boot
  service: name=keystone state=stopped enabled=no

- name: create keystone database
  mysql_db: name={{ keystone_db }}
    login_host={{ keystone_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True

- name: create keystone database user
  mysql_user: name={{ keystone_db_user }} password={{ keystone_db_password }} host={{ item }} priv={{ keystone_db }}.*:ALL
    login_host={{ keystone_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True
  with_items:
    - localhost
    - '%'

- name: install keystone.conf
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf owner=keystone group=root mode=0460
  notify: signal apache to reload

- name: install keystone-paste.ini
  copy: src=keystone-paste.ini dest=/etc/keystone/keystone-paste.ini owner=keystone group=keystone mode=0644
  notify: signal apache to reload

- name: install keystone-federation.conf
  template: src=keystone-federation.conf.j2 dest=/etc/keystone-federation.conf owner=root group=www-data mode=0440
  notify: signal apache to reload

- name: install sso_callback_template.html
  copy: src=sso_callback_template.html dest=/etc/keystone/sso_callback_template.html owner=root group=root mode=0644

- name: sync keystone db
  command: su keystone -s /bin/sh -c "/usr/bin/keystone-manage db_sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  run_once: True

- name: use systemd-tmpfiles to create /var/lock/keystone
  copy: content='d /var/lock/keystone 0755 keystone root - -' dest=/etc/tmpfiles.d/keystone.conf owner=root group=root mode=0644
  notify: run systemd-tmpfiles.d

- name: create /var/www/cgi-bin/keystone
  file: path=/var/www/cgi-bin/keystone state=directory owner=root group=root mode=0755
  notify: signal apache to reload

- name: install keystone-wsgi server
  file: src=/usr/bin/keystone-wsgi-public dest=/var/www/cgi-bin/keystone/keystone state=link force=yes
  notify: signal apache to reload

- meta: flush_handlers

### Fernet key handling

- name: create ssh key for keystone
  local_action: command ssh-keygen -f "{{ playbook_dir }}/workdir/keystone_id_rsa" -b 2048 -P ""
                creates="{{ playbook_dir }}/workdir/keystone_id_rsa.pub"
  run_once: True
  become: False
  when: keystone_token_provider == 'fernet'

- name: make sure .ssh directory exists
  file: path=/var/lib/keystone/.ssh state=directory owner=keystone group=keystone mode=0750
  when: keystone_token_provider == 'fernet'

- name: install the public key for keystone
  copy: src=workdir/keystone_id_rsa.pub dest=/var/lib/keystone/.ssh/authorized_keys owner=keystone group=keystone mode=0640
  when: keystone_token_provider == 'fernet'

- name: install the private key for keystone
  copy: src=workdir/keystone_id_rsa dest=/var/lib/keystone/.ssh/id_rsa owner=keystone group=keystone mode=0600
  when: keystone_token_provider == 'fernet'

- name: set the login shell to /bin/sh for keystone
  user: name=keystone shell=/bin/sh
  when: keystone_token_provider == 'fernet'

# Cluster repair

- name: check if fernet keys already exists
  stat: path=/etc/keystone/fernet-keys
  register: fernet_stat

- name: reclaim existing fernet keys
  command: su keystone -s /bin/sh -c
     "rsync -ia -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      {{ item }}:/etc/keystone/fernet-keys
      /etc/keystone"
  register: rsync_results
  changed_when: rsync_results.stdout_lines | count > 0
  when: inventory_hostname == groups['keystone'][0] and
        item != groups['keystone'][0] and
        hostvars[item].fernet_stat.stat.isdir | default(False) and
        keystone_token_provider == 'fernet'
  with_items: "{{ play_hosts }}"

# Fernet key creation and distribution

- name: initialize fernet keys
  command: su keystone -s /bin/sh -c "/usr/bin/keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone" creates=/etc/keystone/fernet-keys/0
  register: keystone_fernet_init
  run_once: True
  when: keystone_token_provider == 'fernet'

- name: distribute fernet keys
  command: su keystone -s /bin/sh -c
     "rsync --delete -ia -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
      /etc/keystone/fernet-keys
      {{ inventory_hostname }}:/etc/keystone/"
  register: rsync_results
  changed_when: rsync_results.stdout_lines | count > 0
  delegate_to: "{{ groups['keystone'][0] }}"
  when: inventory_hostname != groups['keystone'][0] and keystone_token_provider == 'fernet'

- name: install fernet-rotate script
  template: src=fernet-rotate.sh.j2 dest=/usr/local/bin/fernet-rotate.sh owner=root group=root mode=0755

- name: set up fernet-rotate cron job
  cron: name="fernet-rotate"
    minute=48
    hour="{{ groups['keystone'].index(inventory_hostname) }}-23/{{ groups['keystone'] | count }}"
    user=keystone
    job="/usr/local/bin/fernet-rotate.sh"
    state={{ (keystone_token_provider == 'fernet') | ternary('present', 'absent') }}

# Bootstrap keystone

- name: bootstrap keystone
  command: su keystone -s /bin/sh -c "/usr/bin/keystone-manage bootstrap --bootstrap-password {{ keystone_admin_password }}"
  run_once: True
