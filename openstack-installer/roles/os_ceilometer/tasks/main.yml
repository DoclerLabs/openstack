---

- name: create ceilometer vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ ceilometer_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create ceilometer user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ ceilometer_rabbit_user }}" password="{{ ceilometer_rabbit_password }}"
      vhost="{{ ceilometer_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the ceilometer vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ ceilometer_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: ensure ceilometer account has the ResellerAdmin role
  keystone_user:
    login_project_name=admin
    login_user=admin
    login_domain_name="Default"
    login_password="{{ keystone_admin_password }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    cacert={{ SSLCACertificateFile }}
    insecure={{ ssl_insecure | ternary("true", "false") }}
    project_domain="{{ ceilometer_project_domain_name }}"
    project="{{ ceilometer_project_name }}"
    user="{{ ceilometer_admin_user }}"
    user_domain="{{ ceilometer_domain_name }}"
    role="ResellerAdmin"
  when: inventory_hostname == groups['ceilometer_controller'][0] and groups['swift_proxy'] | count > 0

- name: mask autostarting of ceilometer controller services
  service_mask: name={{ item }} state=masked
  with_items:
    - ceilometer-api
    - ceilometer-collector
    - ceilometer-agent-central
    - ceilometer-agent-notification
  when: inventory_hostname in groups['ceilometer_controller']

- name: mask autostarting of ceilometer compute services
  service_mask: name={{ item }} state=masked
  with_items:
    - ceilometer-agent-compute
  when: inventory_hostname in groups['ceilometer_compute']

- name: install ceilometer controller services
  apt: name={{ item }}
  with_items:
    - ceilometer-api
    - ceilometer-collector
    - ceilometer-agent-central
    - ceilometer-agent-notification
    - python-ceilometerclient
  when: inventory_hostname in groups['ceilometer_controller']

- name: install ceilometer compute services
  apt: name={{ item }}
  with_items:
    - ceilometer-agent-compute
  when: inventory_hostname in groups['ceilometer_compute']

- name: install ceilometer configs
  template: src=ceilometer.conf.j2 dest=/etc/ceilometer/ceilometer.conf owner=ceilometer group=root mode=0460
  notify:
    - restart ceilometer controller services
    - restart ceilometer compute services

- name: install yaml files
  copy: src={{ item }}.yaml dest=/etc/ceilometer/{{ item }}.yaml owner=root group=root mode=0644
  when: inventory_hostname in groups['ceilometer_controller']
  with_items:
    - event_pipeline
    - event_definitions
    - gnocchi_resources
  notify:
    - restart ceilometer controller services

- name: unmask autostarting of ceilometer controller services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - ceilometer-api
    - ceilometer-collector
    - ceilometer-agent-central
    - ceilometer-agent-notification
  when: inventory_hostname in groups['ceilometer_controller']

- name: unmask autostarting of ceilometer compute services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - ceilometer-agent-compute
  when: inventory_hostname in groups['ceilometer_compute']

- meta: flush_handlers

- name: ensure ceilometer controller services are started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - ceilometer-api
    - ceilometer-collector
    - ceilometer-agent-central
    - ceilometer-agent-notification
  when: inventory_hostname in groups['ceilometer_controller']

- name: ensure ceilometer is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - ceilometer-agent-compute
  when: inventory_hostname in groups['ceilometer_compute']

- name: set up ceilometer-expirer cron job
  cron: name="ceilometer-expirer"
    minute=12
    hour="{{ groups['ceilometer_controller'].index(inventory_hostname) }}-23/{{ groups['ceilometer_controller'] | count }}"
    user=ceilometer
    job="/usr/bin/ceilometer-expirer"
  when: inventory_hostname in groups['ceilometer_controller']
