{% set host_index = groups[(inventory_hostname in groups['ceilometer_controller']) | ternary('ceilometer_controller', 'ceilometer_compute')].index(inventory_hostname) % groups['rabbitmq'] | count %}
{% set rabbit_hosts = groups['rabbitmq'][host_index:] + groups['rabbitmq'][:host_index] %}
[DEFAULT]

#
# From oslo.log
#

# Print debugging output (set logging level to DEBUG instead of
# default INFO level). (boolean value)
#debug = false
debug = {{ ceilometer_debug }}

# If set to false, will disable INFO logging level, making WARNING the
# default. (boolean value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
#verbose = true
verbose = true

# The name of a logging configuration file. This file is appended to
# any existing logging configuration files. For details about logging
# configuration files, see the Python logging module documentation.
# (string value)
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append = <None>

# DEPRECATED. A logging.Formatter log message format string which may
# use any of the available logging.LogRecord attributes. This option
# is deprecated.  Please use logging_context_format_string and
# logging_default_format_string instead. (string value)
#log_format = <None>

# Format string for %%(asctime)s in log records. Default: %(default)s
# . (string value)
#log_date_format = %Y-%m-%d %H:%M:%S

# (Optional) Name of log file to output to. If no default is set,
# logging will go to stdout. (string value)
# Deprecated group/name - [DEFAULT]/logfile
#log_file = <None>

# (Optional) The base directory used for relative --log-file paths.
# (string value)
# Deprecated group/name - [DEFAULT]/logdir
#log_dir = <None>
log_dir = /var/log/ceilometer

# Use syslog for logging. Existing syslog format is DEPRECATED and
# will be changed later to honor RFC5424. (boolean value)
#use_syslog = false
use_syslog = {{ ceilometer_syslog_use }}

# (Optional) Enables or disables syslog rfc5424 format for logging. If
# enabled, prefixes the MSG part of the syslog message with APP-NAME
# (RFC5424). The format without the APP-NAME is deprecated in Kilo,
# and will be removed in Mitaka, along with this option. (boolean
# value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
#use_syslog_rfc_format = true

# Syslog facility to receive log lines. (string value)
#syslog_log_facility = LOG_USER

# Log output to standard error. (boolean value)
#use_stderr = true
use_stderr = false

# Format string to use for log messages with context. (string value)
#logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s

# Format string to use for log messages without context. (string
# value)
#logging_default_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Data to append to log format when level is DEBUG. (string value)
#logging_debug_format_suffix = %(funcName)s %(pathname)s:%(lineno)d

# Prefix each line of exception output with this format. (string
# value)
#logging_exception_prefix = %(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s

# List of logger=LEVEL pairs. (list value)
#default_log_levels = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN,urllib3.connectionpool=WARN,websocket=WARN,requests.packages.urllib3.util.retry=WARN,urllib3.util.retry=WARN,keystonemiddleware=WARN,routes.middleware=WARN,stevedore=WARN,taskflow=WARN

# Enables or disables publication of error events. (boolean value)
#publish_errors = false

# The format for an instance that is passed with the log message.
# (string value)
#instance_format = "[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log message.
# (string value)
#instance_uuid_format = "[instance: %(uuid)s] "

# Enables or disables fatal status of deprecations. (boolean value)
#fatal_deprecations = false

transport_url = rabbit://{% for host in rabbit_hosts %}{{ ceilometer_rabbit_user }}:{{ ceilometer_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ ceilometer_rabbit_vhost }}

#
# From oslo.service.service
#

# Enable eventlet backdoor.  Acceptable values are 0, <port>, and
# <start>:<end>, where 0 results in listening on a random tcp port
# number; <port> results in listening on the specified port number
# (and not enabling backdoor if that port is in use); and
# <start>:<end> results in listening on the smallest unused port
# number within the specified range of port numbers.  The chosen port
# is displayed in the service's log file. (string value)
#backdoor_port = <None>

# Enables or disables logging values of all registered options when
# starting a service (at DEBUG level). (boolean value)
#log_options = true

auth_startegy = keystone

{% if inventory_hostname in groups['ceilometer_controller'] %}

{% if ceilometer_store_meters %}
meter_dispatchers = gnocchi
{% else %}
meter_dispatchers =
{% endif %}

{% if ceilometer_store_events %}
event_dispatchers = panko
{% else %}
event_dispatchers =
{% endif %}

{% if ceilometer_store_meters %}
[dispatcher_gnocchi]

filter_service_activity = False
filter_project = service
archive_policy = {{ ceilometer_gnocchi_archive_policy }}
resources_definition_file = /etc/ceilometer/gnocchi_resources.yaml
{% endif %}

[collector]

udp_address = {{ ip.mgmt }}
{% if ceilometer_store_meters %}
batch_size = 100
batch_timeout = 5
{% endif %}

[notification]

workload_partitioning = {{ groups['zookeeper'] | count > 0 }}

store_events = {{ ceilometer_store_events }}

{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ ceilometer_rabbit_user }}:{{ ceilometer_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ ceilometer_rabbit_vhost }}
{% endfor %}

{% if groups['keystone'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ keystone_rabbit_user }}:{{ keystone_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ keystone_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['glance'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ glance_rabbit_user }}:{{ glance_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ glance_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['nova_controller'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ nova_rabbit_user }}:{{ nova_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ nova_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['neutron_controller'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ neutron_rabbit_user }}:{{ neutron_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ neutron_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['cinder'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ cinder_rabbit_user }}:{{ cinder_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ cinder_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['heat'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ heat_rabbit_user }}:{{ heat_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ heat_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['swift_proxy'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ swift_rabbit_user }}:{{ swift_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ swift_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['trove'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ trove_rabbit_user }}:{{ trove_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ trove_rabbit_vhost }}
{% endfor %}
{% endif %}

{% if groups['sahara'] | count > 0 %}
{% for host in groups['rabbitmq'] %}
messaging_urls = rabbit://{{ sahara_rabbit_user }}:{{ sahara_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672/{{ sahara_rabbit_vhost }}
{% endfor %}
{% endif %}

[database]

{% if ceilometer_store_events %}

{% if panko_backend == 'mongodb' %}
event_connection = mongodb://panko:{{ panko_db_password }}@{% for host in groups['mongodb'] %}{{ hostvars[host].ip.mgmt }}:27017{% if not loop.last %},{% endif %}{% endfor %}/panko?replicaSet={{ mongodb_replica_set }}
{% else %}
event_connection = mysql+pymysql://{{ panko_db_user }}:{{ panko_db_password }}@{{ panko_mysql_server }}/{{ panko_db }}?charset=utf8
{% endif %}

{% endif %}

max_retries = -1

{% endif %}

{% if inventory_hostname in groups['ceilometer_compute'] %}

[compute]

instance_discovery_method = {{ ceilometer_instance_discovery_method }}

{% endif %}

[keystone_authtoken]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:35357
auth_uri = {{ keystone_proto }}://{{ keystone_public_address }}:5000
region_name = {{ keystone_region_name }}
username = {{ ceilometer_admin_user }}
user_domain_name = {{ ceilometer_domain_name }}
password = {{ ceilometer_admin_password }}
project_name = {{ ceilometer_project_name }}
project_domain_name = {{ ceilometer_project_domain_name }}
service_token_roles_required = True
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
region_name = {{ keystone_region_name }}
memcached_servers = {% for host in groups['memcached'] %}{{ hostvars[host].ip.mgmt }}:11211{% if not loop.last %},{% endif %}{% endfor %}

memcache_security_strategy = ENCRYPT
memcache_secret_key = {{ memcache_secret_key }}


[service_credentials]

auth_type = password
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:35357
username = {{ ceilometer_admin_user }}
user_domain_name = {{ ceilometer_domain_name }}
password = {{ ceilometer_admin_password }}
project_name = {{ ceilometer_project_name }}
project_domain_name = {{ ceilometer_project_domain_name }}
interface = internalURL
region_name = {{ keystone_region_name }}


[cache]

enabled = True
backend = oslo_cache.memcache_pool
expiration_time = {{ ceilometer_cache_expiration_time }}
memcache_servers = {% for host in groups['memcached'] %}{{ hostvars[host].ip.mgmt }}:11211{% if not loop.last %},{% endif %}{% endfor %}


[oslo_concurrency]

lock_path = /var/lock/ceilometer


[oslo_messaging_notifications]

driver = messagingv2
transport_url = rabbit://{% for host in rabbit_hosts %}{{ ceilometer_rabbit_user }}:{{ ceilometer_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ ceilometer_rabbit_vhost }}


[oslo_messaging_rabbit]

rabbit_ha_queues = true


[oslo_policy]

#
# From oslo.policy
#

# The JSON file that defines policies. (string value)
# Deprecated group/name - [DEFAULT]/policy_file
#policy_file = policy.json

# Default rule. Enforced when a requested rule is not found. (string
# value)
# Deprecated group/name - [DEFAULT]/policy_default_rule
#policy_default_rule = default

# Directories where policy configuration files are stored. They can be
# relative to any directory in the search path defined by the
# config_dir option, or absolute paths. The file defined by
# policy_file must exist for these directories to be searched.
# Missing or empty directories are ignored. (multi valued)
# Deprecated group/name - [DEFAULT]/policy_dirs
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
#policy_dirs = policy.d

[publisher]
telemetry_secret = {{ ceilometer_telemetry_secret }}

{% if groups['zookeeper'] | count > 0 %}
[coordination]
backend_url = kazoo://{% for host in groups['zookeeper'] %}{{ hostvars[host].ip.mgmt }}:2181{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}
