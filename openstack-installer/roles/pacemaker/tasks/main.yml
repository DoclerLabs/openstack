---

- name: install pacemaker
  apt: name={{ item }}
  with_items:
    - pacemaker
    - corosync

- name: install corosync.conf
  template: src=corosync.conf.j2 dest=/etc/corosync/corosync.conf owner=root group=root mode=0644
  notify: restart pacemaker

- name: enable corosync
  copy: content='START=yes' dest=/etc/default/corosync owner=root group=root mode=0644
  notify: restart pacemaker

- name: check if there's an existing authkey
  local_action: stat path=workdir/authkey
  become: False
  register: authkey_result

- name: distribute corosync authkey
  copy: src=workdir/authkey dest=/etc/corosync/authkey owner=root group=root mode=0400
  when: authkey_result.stat.exists
  notify: restart pacemaker

- name: create corosync authkey if it doesn't exist
  command: corosync-keygen -l creates=/etc/corosync/authkey
  notify: restart pacemaker
  when: inventory_hostname == play_hosts[0]

- name: fetch the new corosync authkey
  fetch: src=/etc/corosync/authkey dest=workdir/authkey flat=True
  when: inventory_hostname == play_hosts[0]

- name: distribute the new corosync authkey
  copy: src=workdir/authkey dest=/etc/corosync/authkey owner=root group=root mode=0400
  notify: restart pacemaker
  when: inventory_hostname != play_hosts[0]

- meta: flush_handlers

- name: ensure pacemaker is running
  service: name={{ item }} state=started enabled=yes
  with_items:
    - corosync
    - pacemaker

- name: wait until the cluster is active
  command: /usr/sbin/crm_mon -1
  register: pacemaker_status
  until: 'pacemaker_status.stdout.find("Current DC: NONE") == -1 and pacemaker_status.rc == 0'
  failed_when: False
  changed_when: False
  retries: 10
  delay: 5

- name: disable STONITH
  pacemaker: action='property' params='stonith-enabled=false'
  run_once: True

- name: set no-quorum-policy
  pacemaker: action='property' params='no-quorum-policy=ignore'
  when: play_hosts | count < 3
  run_once: True

- name: create mgmt VIP address
  pacemaker:
    action: primitive
    name: mgmt_vip
    params:
      type: ocf:heartbeat:IPaddr2
      params:
        ip: "{{ vip_mgmt }}"
        cidr_netmask: "{{ vip_mgmt_cidr }}"
        nic: "{{ vip_mgmt_nic }}"
    state: present
  run_once: True

- name: create public VIP address
  pacemaker:
    action: primitive
    name: public_vip
    params:
      type: ocf:heartbeat:IPaddr2
      params:
        ip: "{{ vip_public }}"
        cidr_netmask: "{{ vip_public_cidr }}"
        nic: "{{ vip_public_nic }}"
    state: present
  run_once: True
  when: vip_mgmt != vip_public

- name: colocate public and management VIP
  pacemaker:
    action: colocation
    name: colocate_vip
    params:
      score: inf
      rsc:
        - mgmt_vip
        - public_vip
  when: vip_mgmt != vip_public and pacemaker_colocate_vips
  run_once: True
