---

- name: create ironic vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ ironic_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create ironic user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ ironic_rabbit_user }}" password="{{ ironic_rabbit_password }}"
      vhost="{{ ironic_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the ironic vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ ironic_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask autostarting of ironic services
  service_mask: name={{ item }} state=masked
  with_items:
    - ironic-api
    - ironic-conductor

- name: install ironic packages
  apt:
    name:
    - ipmitool
    - tftpd-hpa
    - syslinux-common
    - syslinux
    - pxelinux
    - qemu-utils
    - open-iscsi
    - ironic-api
    - ironic-common
    - ironic-conductor
    - python3-ironic
    - python3-ironicclient
    - python3-scciclient
    - python3-shade
    - python3-mysqldb
    - python3-memcache

- name: create ironic database
  mysql_db: name={{ ironic_db }}
    login_host={{ ironic_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True

- name: create ironic database user
  mysql_user: name={{ ironic_db_user }} password={{ ironic_db_password }} host={{ item }} priv={{ ironic_db }}.*:ALL
    login_host={{ ironic_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True
  with_items:
    - localhost
    - '%'

- name: install ironic configs
  template: src={{ item }}.j2 dest=/etc/ironic/{{ item }} mode=0460 owner=ironic group=root
  with_items:
    - ironic.conf
  notify: restart ironic

- name: ensure ironic-dbsync.log owned by ironic
  file: path=/var/log/ironic/ironic-dbsync.log state=file owner=ironic group=ironic mode=0640
  failed_when: False

- name: Perform a ironic DB sync
  command: su ironic -s /bin/sh -c 'ironic-dbsync --config-file /etc/ironic/ironic.conf'
  run_once: True
  register: ironic_db_sync
  changed_when: "'Running upgrade' in ironic_db_sync.stderr"
  notify: restart ironic

- name: unmask autostarting of ironic services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - ironic-api
    - ironic-conductor

- meta: flush_handlers

- name: ensure ironic services are started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - ironic-api
    - ironic-conductor

- name: copy pxelinux to tftpd dir
  copy: src={{ item }} dest=/var/lib/tftpboot/{{ item | basename }} remote_src=True
  with_items:
    - /usr/lib/PXELINUX/pxelinux.0
    - /usr/lib/syslinux/modules/bios/chain.c32
    - /usr/lib/syslinux/modules/bios/ldlinux.c32

- name: install map file for tftp
  copy: src=map-file dest=/var/lib/tftpboot/map-file
  notify: restart tftp

- name: set tftpd options (use map file)
  lineinfile: dest=/etc/default/tftpd-hpa
    regexp='^TFTP_OPTIONS'
    line='TFTP_OPTIONS="--secure  --map-file /var/lib/tftpboot/map-file"'
    owner=root group=root mode=0644
  notify: restart tftp

- meta: flush_handlers

- name: ensure tftpd is started
  service: name=tftpd-hpa state=started enabled=yes

- name: set permissions of tftpboot
  file: path=/var/lib/tftpboot recurse=yes owner=ironic

- name: copy the deploy images
  copy: src={{ item }} dest=/root/{{ item | basename }} owner=root group=root mode=0644
  with_items:
    - "{{ ironic_deploy_kernel_path }}"
    - "{{ ironic_deploy_initramfs_path }}"
  run_once: True

- name: upload the deploy kernel to glance
  os_image:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: "{{ ironic_admin_user }}"
      password: "{{ ironic_admin_password }}"
      domain_name: "{{ ironic_domain_name }}"
      project_name: "{{ ironic_project_name }}"
      project_domain_name: "{{ ironic_project_domain_name }}"
    cacert: "{{ SSLCACertificateFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: ironic-deploy-kernel
    container_format: aki
    disk_format: aki
    filename: "/root/{{ ironic_deploy_kernel_path | basename }}"
    properties:
      hypervisor_type: baremetal
    is_public: True
    state: present
  run_once: True

- name: upload the deploy initramfs to glance
  os_image:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:5000/v3"
      username: "{{ ironic_admin_user }}"
      password: "{{ ironic_admin_password }}"
      domain_name: "{{ ironic_domain_name }}"
      project_name: "{{ ironic_project_name }}"
      project_domain_name: "{{ ironic_project_domain_name }}"
    cacert: "{{ SSLCACertificateFile }}"
    validate_certs: "{{ ssl_insecure | ternary(False, True) }}"
    region_name: "{{ keystone_region_name }}"
    endpoint_type: internal
    name: ironic-deploy-initramfs
    container_format: ari
    disk_format: ari
    filename: "/root/{{ ironic_deploy_initramfs_path | basename }}"
    properties:
      hypervisor_type: baremetal
    is_public: True
    state: present
  run_once: True
