{% set host_index = groups['ironic'].index(inventory_hostname) % groups['rabbitmq'] | count %}
{% set rabbit_hosts = groups['rabbitmq'][host_index:] + groups['rabbitmq'][:host_index] %}
[DEFAULT]

debug = {{ ironic_debug }}
log_dir=/var/log/ironic
use_syslog = {{ ironic_syslog_use }}
use_stderr=false

transport_url = rabbit://{% for host in rabbit_hosts %}{{ ironic_rabbit_user }}:{{ ironic_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ ironic_rabbit_vhost }}

my_ip={{ ip.mgmt }}

#enabled_drivers=pxe_ipmitool
enabled_network_interfaces = {{ ironic_enabled_network_interfaces }}

default_network_interface = {{ ironic_default_network_interface }}


[agent]

#
# Options defined in ironic.drivers.modules.agent
#

# Whether Ironic will manage booting of the agent ramdisk. If
# set to False, you will need to configure your mechanism to
# allow booting the agent ramdisk. (boolean value)
# Deprecated group/name - [agent]/manage_tftp
#manage_agent_boot=true

# The memory size in MiB consumed by agent when it is booted on a
# bare metal node. This is used for checking if the image can
# be downloaded and deployed on the bare metal node after booting
# agent ramdisk. This may be set according to the memory
# consumed by the agent ramdisk image. (integer value)
#memory_consumed_by_agent=0


#
# Options defined in ironic.drivers.modules.agent_base_vendor
#

# Maximum interval (in seconds) for agent heartbeats. (integer
# value)
#heartbeat_timeout=300

# Number of times to retry getting power state to check if
# bare metal node has been powered off after a soft power off.
# (integer value)
#post_deploy_get_power_state_retries=6

# Amount of time (in seconds) to wait between polling power
# state after trigger soft poweroff. (integer value)
#post_deploy_get_power_state_retry_interval=5


#
# Options defined in ironic.drivers.modules.agent_client
#

# API version to use for communicating with the ramdisk agent.
# (string value)
#agent_api_version=v1


[amt]

#
# Options defined in ironic.drivers.modules.amt.common
#

# Protocol used for AMT endpoint, support http/https (string
# value)
#protocol=http


#
# Options defined in ironic.drivers.modules.amt.power
#

# Maximum number of times to attempt an AMT operation, before
# failing (integer value)
#max_attempts=3

# Amount of time (in seconds) to wait, before retrying an AMT
# operation (integer value)
#action_wait=10


[api]

#
# Options defined in ironic.api
#

# The IP address on which ironic-api listens. (string value)
host_ip = 127.0.0.1
api_workers = {{ ironic_api_workers }}
public_endpoint = {{ os_proto }}://{{ os_public_address }}:6385


[cimc]

#
# Options defined in ironic.drivers.modules.cimc.power
#

# Number of times a power operation needs to be retried
# (integer value)
#max_retry=6

# Amount of time in seconds to wait in between power
# operations (integer value)
#action_interval=10


[cisco_ucs]

#
# Options defined in ironic.drivers.modules.ucs.power
#

# Number of times a power operation needs to be retried
# (integer value)
#max_retry=6

# Amount of time in seconds to wait in between power
# operations (integer value)
#action_interval=5


[conductor]

#
# Options defined in ironic.conductor.manager
#

# URL of Ironic API service. If not set ironic can get the
# current value from the keystone service catalog. (string
# value)
#api_url=<None>
{% if ironic_api_url %}
api_url = {{ ironic_api_url }}
{% endif %}

# Seconds between conductor heart beats. (integer value)
#heartbeat_interval=10

# Maximum time (in seconds) since the last check-in of a
# conductor. A conductor is considered inactive when this time
# has been exceeded. (integer value)
#heartbeat_timeout=60

# Interval between syncing the node power state to the
# database, in seconds. (integer value)
#sync_power_state_interval=60

# Interval between checks of provision timeouts, in seconds.
# (integer value)
#check_provision_state_interval=60

# Timeout (seconds) to wait for a callback from a deploy
# ramdisk. Set to 0 to disable timeout. (integer value)
#deploy_callback_timeout=1800

# During sync_power_state, should the hardware power state be
# set to the state recorded in the database (True) or should
# the database be updated based on the hardware state (False).
# (boolean value)
#force_power_state_during_sync=true

# During sync_power_state failures, limit the number of times
# Ironic should try syncing the hardware node power state with
# the node power state in DB (integer value)
#power_state_sync_max_retries=3

# Maximum number of worker threads that can be started
# simultaneously by a periodic task. Should be less than RPC
# thread pool size. (integer value)
#periodic_max_workers=8

# The size of the workers greenthread pool. (integer value)
#workers_pool_size=100

# Number of attempts to grab a node lock. (integer value)
#node_locked_retry_attempts=3

# Seconds to sleep between node lock attempts. (integer value)
#node_locked_retry_interval=1

# Enable sending sensor data message via the notification bus
# (boolean value)
#send_sensor_data=false

# Seconds between conductor sending sensor data message to
# ceilometer via the notification bus. (integer value)
#send_sensor_data_interval=600

# List of comma separated meter types which need to be sent to
# Ceilometer. The default value, "ALL", is a special value
# meaning send all the sensor data. (list value)
#send_sensor_data_types=ALL

# When conductors join or leave the cluster, existing
# conductors may need to update any persistent local state as
# nodes are moved around the cluster. This option controls how
# often, in seconds, each conductor will check for nodes that
# it should "take over". Set it to a negative value to disable
# the check entirely. (integer value)
#sync_local_state_interval=180

# Whether to upload the config drive to Swift. (boolean value)
#configdrive_use_swift=false

# Name of the Swift container to store config drive data. Used
# when configdrive_use_swift is True. (string value)
#configdrive_swift_container=ironic_configdrive_container

# Timeout (seconds) for waiting for node inspection. 0 -
# unlimited. (integer value)
#inspect_timeout=1800

# Cleaning is a configurable set of steps, such as erasing
# disk drives, that are performed on the node to ensure it is
# in a baseline state and ready to be deployed to. This is
# done after instance deletion, and during the transition from
# a "managed" to "available" state. When enabled, the
# particular steps performed to clean a node depend on which
# driver that node is managed by; see the individual driver's
# documentation for details. NOTE: The introduction of the
# cleaning operation causes instance deletion to take
# significantly longer. In an environment where all tenants
# are trusted (eg, because there is only one tenant), this
# option could be safely disabled. (boolean value)
automated_clean = {{ ironic_automated_clean }}

# Timeout (seconds) to wait for a callback from the ramdisk
# doing the cleaning. If the timeout is reached the node will
# be put in the "clean failed" provision state. Set to 0 to
# disable timeout. (integer value)
#clean_callback_timeout=1800


[console]

#
# Options defined in ironic.drivers.modules.console_utils
#

# Path to serial console terminal program (string value)
#terminal=shellinaboxd

# Directory containing the terminal SSL cert(PEM) for serial
# console access (string value)
#terminal_cert_dir=<None>

# Directory for holding terminal pid files. If not specified,
# the temporary directory will be used. (string value)
#terminal_pid_dir=<None>

# Time interval (in seconds) for checking the status of
# console subprocess. (integer value)
#subprocess_checking_interval=1

# Time (in seconds) to wait for the console subprocess to
# start. (integer value)
#subprocess_timeout=10


[cors]

#
# Options defined in oslo.middleware.cors
#

# Indicate whether this resource may be shared with the domain
# received in the requests "origin" header. (string value)
#allowed_origin=<None>

# Indicate that the actual request can include user
# credentials (boolean value)
#allow_credentials=true

# Indicate which headers are safe to expose to the API.
# Defaults to HTTP Simple Headers. (list value)
#expose_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma

# Maximum cache age of CORS preflight requests. (integer
# value)
#max_age=3600

# Indicate which methods can be used during the actual
# request. (list value)
#allow_methods=GET,POST,PUT,DELETE,OPTIONS

# Indicate which header field names may be used during the
# actual request. (list value)
#allow_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma


[cors.subdomain]

#
# Options defined in oslo.middleware.cors
#

# Indicate whether this resource may be shared with the domain
# received in the requests "origin" header. (string value)
#allowed_origin=<None>

# Indicate that the actual request can include user
# credentials (boolean value)
#allow_credentials=true

# Indicate which headers are safe to expose to the API.
# Defaults to HTTP Simple Headers. (list value)
#expose_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma

# Maximum cache age of CORS preflight requests. (integer
# value)
#max_age=3600

# Indicate which methods can be used during the actual
# request. (list value)
#allow_methods=GET,POST,PUT,DELETE,OPTIONS

# Indicate which header field names may be used during the
# actual request. (list value)
#allow_headers=Content-Type,Cache-Control,Content-Language,Expires,Last-Modified,Pragma


[database]

connection = mysql+pymysql://{{ ironic_db_user }}:{{ ironic_db_password }}@{{ ironic_mysql_server }}/{{ ironic_db }}?charset=utf8
max_retries=-1


[keystone]

region_name={{ keystone_region_name }}


[keystone_authtoken]

auth_type = password
auth_uri = {{ keystone_proto }}://{{ keystone_public_address }}:5000
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
region_name={{ keystone_region_name }}
service_token_roles_required = True

memcached_servers = {% for host in groups['memcached'] %}{{ hostvars[host].ip.mgmt }}:11211{% if not loop.last %},{% endif %}{% endfor %}

memcache_security_strategy = ENCRYPT
memcache_secret_key = "{{ memcache_secret_key }}"


[service_catalog]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[neutron]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}

cleaning_network = {{ ironic_cleaning_network }}
provisioning_network = {{ ironic_provisioning_network }}


[glance]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[inspector]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[oslo_concurrency]

lock_path=/var/lock/ironic


[oslo_messaging_rabbit]

rabbit_ha_queues=true


[oslo_messaging_notifications]

{% if ironic_notifications %}
driver = messagingv2
transport_url = rabbit://{% for host in rabbit_hosts %}{{ ironic_rabbit_user }}:{{ ironic_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ ironic_rabbit_vhost }}
{% else %}
driver =
transport_url =
{% endif %}


[oslo_policy]

#
# Options defined in oslo.policy
#

# The JSON file that defines policies. (string value)
#policy_file=policy.json

# Default rule. Enforced when a requested rule is not found.
# (string value)
#policy_default_rule=default

# Directories where policy configuration files are stored.
# They can be relative to any directory in the search path
# defined by the config_dir option, or absolute paths. The
# file defined by policy_file must exist for these directories
# to be searched.  Missing or empty directories are ignored.
# (multi valued)
#policy_dirs=policy.d


[deploy]

#
# Options defined in ironic.drivers.modules.deploy_utils
#

# Size of EFI system partition in MiB when configuring UEFI
# systems for local boot. (integer value)
#efi_system_partition_size=200

# Block size to use when writing to the nodes disk. (string
# value)
#dd_block_size=1M

# Maximum attempts to verify an iSCSI connection is active,
# sleeping 1 second between attempts. (integer value)
#iscsi_verify_attempts=3

# ironic-conductor node's HTTP server URL. Example:
# http://192.1.2.3:8080 (string value)
#http_url=<None>

# ironic-conductor node's HTTP root path. (string value)
#http_root=/httpboot

# Priority to run in-band erase devices via the Ironic Python
# Agent ramdisk. If unset, will use the priority set in the
# ramdisk (defaults to 10 for the GenericHardwareManager). If
# set to 0, will not run during cleaning. (integer value)
# Deprecated group/name - [agent]/agent_erase_devices_priority
#erase_devices_priority=<None>

# Number of iterations to be run for erasing devices. (integer
# value)
# Deprecated group/name - [agent]/agent_erase_devices_iterations
#erase_devices_iterations=1


[dhcp]

#
# Options defined in ironic.common.dhcp_factory
#

# DHCP provider to use. "neutron" uses Neutron, and "none"
# uses a no-op provider. (string value)
#dhcp_provider=neutron


[disk_partitioner]

#
# Options defined in ironic.common.disk_partitioner
#

# After Ironic has completed creating the partition table, it
# continues to check for activity on the attached iSCSI device
# status at this interval prior to copying the image to the
# node, in seconds (integer value)
#check_device_interval=1

# The maximum number of times to check that the device is not
# accessed by another process. If the device is still busy
# after that, the disk partitioning will be treated as having
# failed. (integer value)
#check_device_max_retries=20


[drac]

#
# Options defined in ironic.drivers.modules.drac.client
#

# In case there is a communication failure, the DRAC client is
# going to resend the request as many times as defined in this
# setting. (integer value)
#client_retry_count=5

# In case there is a communication failure, the DRAC client is
# going to wait for as many seconds as defined in this setting
# before resending the request. (integer value)
#client_retry_delay=5



[iboot]

#
# Options defined in ironic.drivers.modules.iboot
#

# Maximum retries for iBoot operations (integer value)
#max_retry=3

# Time between retry attempts for iBoot operations (integer
# value)
#retry_interval=1


[ilo]

#
# Options defined in ironic.drivers.modules.ilo.common
#

# Timeout (in seconds) for iLO operations (integer value)
#client_timeout=60

# Port to be used for iLO operations (integer value)
#client_port=443

# The Swift iLO container to store data. (string value)
#swift_ilo_container=ironic_ilo_container

# Amount of time in seconds for Swift objects to auto-expire.
# (integer value)
#swift_object_expiry_timeout=900

# Set this to True to use http web server to host floppy
# images and generated boot ISO. This requires http_root and
# http_url to be configured in the [deploy] section of the
# config file. If this is set to False, then Ironic will use
# Swift to host the floppy images and generated boot_iso.
# (boolean value)
#use_web_server_for_images=false


#
# Options defined in ironic.drivers.modules.ilo.deploy
#

# Priority for erase devices clean step. If unset, it defaults
# to 10. If set to 0, the step will be disabled and will not
# run during cleaning. (integer value)
#clean_priority_erase_devices=<None>


#
# Options defined in ironic.drivers.modules.ilo.management
#

# Priority for reset_ilo clean step. (integer value)
#clean_priority_reset_ilo=1

# Priority for reset_bios_to_default clean step. (integer
# value)
#clean_priority_reset_bios_to_default=10

# Priority for reset_secure_boot_keys clean step. This step
# will reset the secure boot keys to manufacturing defaults.
# (integer value)
#clean_priority_reset_secure_boot_keys_to_default=20

# Priority for clear_secure_boot_keys clean step. This step is
# not enabled by default. It can be enabled to to clear all
# secure boot keys enrolled with iLO. (integer value)
#clean_priority_clear_secure_boot_keys=0

# Priority for reset_ilo_credential clean step. This step
# requires "ilo_change_password" parameter to be updated in
# nodes's driver_info with the new password. (integer value)
#clean_priority_reset_ilo_credential=30


#
# Options defined in ironic.drivers.modules.ilo.power
#

# Number of times a power operation needs to be retried
# (integer value)
#power_retry=6

# Amount of time in seconds to wait in between power
# operations (integer value)
#power_wait=2


[inspector]

#
# Options defined in ironic.drivers.modules.inspector
#

# whether to enable inspection using ironic-inspector (boolean
# value)
#enabled=false

# ironic-inspector HTTP endpoint. If this is not set, the
# ironic-inspector client default (http://127.0.0.1:5050) will
# be used. (string value)
#service_url=<None>

# period (in seconds) to check status of nodes on inspection
# (integer value)
#status_check_period=60


[ipmi]

#
# Options defined in ironic.drivers.modules.ipminative
#

# Maximum time in seconds to retry IPMI operations. There is a
# tradeoff when setting this value. Setting this too low may
# cause older BMCs to crash and require a hard reset. However,
# setting too high can cause the sync power state periodic
# task to hang when there are slow or unresponsive BMCs.
# (integer value)
#retry_timeout=60

# Minimum time, in seconds, between IPMI operations sent to a
# server. There is a risk with some hardware that setting this
# too low may cause the BMC to crash. Recommended setting is 5
# seconds. (integer value)
#min_command_interval=5


[irmc]

#
# Options defined in ironic.drivers.modules.irmc.common
#

# Port to be used for iRMC operations, either 80 or 443
# (integer value)
#port=443

# Authentication method to be used for iRMC operations, either
# "basic" or "digest" (string value)
#auth_method=basic

# Timeout (in seconds) for iRMC operations (integer value)
#client_timeout=60

# Sensor data retrieval method, either "ipmitool" or "scci"
# (string value)
#sensor_method=ipmitool


#
# Options defined in ironic.drivers.modules.irmc.deploy
#

# Ironic conductor node's "NFS" or "CIFS" root path (string
# value)
#remote_image_share_root=/remote_image_share_root

# IP of remote image server (string value)
#remote_image_server=<None>

# Share type of virtual media, either "NFS" or "CIFS" (string
# value)
#remote_image_share_type=CIFS

# share name of remote_image_server (string value)
#remote_image_share_name=share

# User name of remote_image_server (string value)
#remote_image_user_name=<None>

# Password of remote_image_user_name (string value)
#remote_image_user_password=<None>

# Domain name of remote_image_user_name (string value)
#remote_image_user_domain=



[pxe]

#
# Options defined in ironic.drivers.modules.iscsi_deploy
#

# Additional append parameters for baremetal PXE boot. (string
# value)
#pxe_append_params=nofb nomodeset vga=normal

# Default file system format for ephemeral partition, if one
# is created. (string value)
#default_ephemeral_format=ext4

# On the ironic-conductor node, directory where images are
# stored on disk. (string value)
#images_path=/var/lib/ironic/images/

# On the ironic-conductor node, directory where master
# instance images are stored on disk. (string value)
#instance_master_path=/var/lib/ironic/master_images

# Maximum size (in MiB) of cache for master images, including
# those in use. (integer value)
#image_cache_size=20480

# Maximum TTL (in minutes) for old master images in cache.
# (integer value)
#image_cache_ttl=10080

# The disk devices to scan while doing the deploy. (string
# value)
#disk_devices=cciss/c0d0,sda,hda,vda


#
# Options defined in ironic.drivers.modules.pxe
#

# On ironic-conductor node, template file for PXE
# configuration. (string value)
#pxe_config_template=$pybasedir/drivers/modules/pxe_config.template

# On ironic-conductor node, template file for PXE
# configuration for UEFI boot loader. (string value)
#uefi_pxe_config_template=$pybasedir/drivers/modules/elilo_efi_pxe_config.template

# IP address of ironic-conductor node's TFTP server. (string
# value)
#tftp_server=$my_ip
tftp_server={{ ip.tftp | default(ip.mgmt) }}

# ironic-conductor node's TFTP root path. (string value)
tftp_root=/var/lib/tftpboot

# Directory where master tftp images are stored on disk.
# (string value)
#tftp_master_path=/tftpboot/master_images
tftp_master_path=/var/lib/tftpboot/master_images

# Bootfile DHCP parameter. (string value)
#pxe_bootfile_name=pxelinux.0

# Bootfile DHCP parameter for UEFI boot mode. (string value)
#uefi_pxe_bootfile_name=elilo.efi

# Enable iPXE boot. (boolean value)
#ipxe_enabled=false

# On ironic-conductor node, the path to the main iPXE script
# file. (string value)
#ipxe_boot_script=$pybasedir/drivers/modules/boot.ipxe


[seamicro]

#
# Options defined in ironic.drivers.modules.seamicro
#

# Maximum retries for SeaMicro operations (integer value)
#max_retry=3

# Seconds to wait for power action to be completed (integer
# value)
#action_timeout=10


[snmp]

#
# Options defined in ironic.drivers.modules.snmp
#

# Seconds to wait for power action to be completed (integer
# value)
#power_timeout=10


[ssh]

#
# Options defined in ironic.drivers.modules.ssh
#

# libvirt URI (string value)
#libvirt_uri=qemu:///system


[swift]

#
# Options defined in ironic.common.swift
#

# Maximum number of times to retry a Swift request, before
# failing. (integer value)
#swift_max_retries=2


[virtualbox]

#
# Options defined in ironic.drivers.modules.virtualbox
#

# Port on which VirtualBox web service is listening. (integer
# value)
#port=18083
