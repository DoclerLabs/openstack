---

- name: create heat vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ heat_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create heat user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ heat_rabbit_user }}" password="{{ heat_rabbit_password }}"
      vhost="{{ heat_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the heat vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ heat_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask autostarting of heat
  service_mask: name={{ item }} state=masked
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- name: install heat
  apt:
    name:
    - heat-api
    - heat-api-cfn
    - heat-engine
    - python3-heat
    - python3-heatclient

- name: ensure python-heat is not installed
  apt: name=python-heat state=absent

- name: create heat database
  mysql_db: name={{ heat_db }}
    login_host={{ heat_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True

- name: create heat database user
  mysql_user: name={{ heat_db_user }} password={{ heat_db_password }} host={{ item }} priv={{ heat_db }}.*:ALL
    login_host={{ heat_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  run_once: True
  with_items:
    - localhost
    - '%'

- name: install heat configs
  template: src={{ item }}.conf.j2 dest=/etc/heat/{{ item }}.conf owner=heat group=root mode=0460
  with_items:
    - heat
  notify: restart heat

- name: sync heat db
  command: su heat -s /bin/sh -c "/usr/bin/heat-manage db_sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  run_once: True

- name: unmask autostarting of heat
  service_mask: name={{ item }} state=unmasked
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine

- meta: flush_handlers

- name: ensure heat is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - heat-api
    - heat-api-cfn
    - heat-engine
