---

- name: make sure clients are exist
  apt: name={{ item }}
  with_items:
    - python-keystoneclient
    - python-openstackclient
    - python-shade
  become: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''
  become: True

- name: get an admin token
  command: openstack token issue
    --os-auth-url "{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    --os-user-domain-name Default
    --os-username admin
    --os-project-domain-name Default
    --os-project-name admin
    --os-password "{{ keystone_admin_password }}"
    {{ ssl_insecure | ternary('--insecure', '') }}
    {{ (SSLCACertificateFile != '') | ternary('--os-cacert ' + SSLCACertificateFile, '') }}
    -c id -f value
  changed_when: False
  register: os_token_id
  until: os_token_id | success
  delay: 5
  retries: 5
  when: os_token_id is not defined

- name: set admin token
  set_fact: os_admin_token="{{ os_token_id.stdout }}"
  when: os_token_id.stdout is defined

- name: create the service in keystone
  keystone_service: >
    token="{{ os_admin_token }}"
    auth_url="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    name="{{ keystone_service_name }}"
    type="{{ keystone_service_type }}"
    description="{{ keystone_service_description }}"
    publicurl="{{ keystone_public_url }}"
    internalurl="{{ keystone_internal_url }}"
    adminurl="{{ keystone_admin_url }}"
    region="{{ keystone_region }}"
    ignore_other_regions=true
    cacert="{{ SSLCACertificateFile }}"
    insecure={{ ssl_insecure | ternary("true", "false") }}
  when: keystone_service_name is defined

- name: create the project in keystone
  os_project:
    auth:
      auth_url: "{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
      user_domain_name: Default
      username: admin
      password: "{{ keystone_admin_password }}"
      project_domain_name: Default
      project_name: admin
    cacert: "{{ SSLCACertificateFile }}"
    validate_certs: "{{ ssl_insecure | ternary('false', 'true') }}"
    region_name: "{{ keystone_region }}"
    endpoint_type: internal
    name: "{{ item.keystone_project_name }}"
    description: "{{ item.keystone_project_description }}"
    domain: "{{ item.keystone_project_domain_name | default('Default') }}"
  with_items: "{{ keystone_projects | default([]) }}"


#- name: create the project in keystone
#  keystone_user: >
#    token="{{ os_admin_token }}"
#    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
#    project_domain="{{ item.keystone_project_domain_name | default('Default') }}"
#    project="{{ item.keystone_project_name }}"
#    project_description="{{ item.keystone_project_description }}"
#    cacert="{{ SSLCACertificateFile }}"
#    insecure={{ ssl_insecure | ternary("true", "false") }}
#  with_items: "{{ keystone_projects | default([]) }}"

- name: create roles in keystone
  keystone_user: >
    token="{{ os_admin_token }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    cacert="{{ SSLCACertificateFile }}"
    insecure={{ ssl_insecure | ternary("true", "false") }}
    role="{{ item }}"
  with_items: "{{ keystone_roles | default([]) }}"

- name: create the user in keystone
  keystone_user: >
    token="{{ os_admin_token }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    user="{{ item.keystone_user }}"
    user_domain="{{ item.keystone_domain_name | default('Default') }}"
    password="{{ item.keystone_password }}"
    cacert="{{ SSLCACertificateFile }}"
    insecure={{ ssl_insecure | ternary("true", "false") }}
  with_items: "{{ keystone_users | default([]) }}"

- name: assign role to the user in keystone
  keystone_user: >
    token="{{ os_admin_token }}"
    endpoint="{{ keystone_proto }}://{{ keystone_admin_address }}:35357/v3"
    project="{{ item.keystone_project_name }}"
    project_domain="{{ item.keystone_project_domain_name | default('Default') }}"
    user="{{ item.keystone_user }}"
    user_domain="{{ item.keystone_domain_name | default('Default') }}"
    role="{{ item.keystone_role }}"
    cacert="{{ SSLCACertificateFile }}"
    insecure={{ ssl_insecure | ternary("true", "false") }}
  with_items: "{{ keystone_users | default([]) }}"
  when: item.keystone_role is defined
