From 124d03bf9d0a6628abf171698d94a7e17112f4ee Mon Sep 17 00:00:00 2001
From: gord chung <gord@live.ca>
Date: Thu, 2 Nov 2017 14:49:00 +0000
Subject: refresh agent if group membership changes

this broke when we switched to tooz partitioner
- ensure we trigger refresh if group changes
- ensure we have heartbeat or else members will just die.

- remove retain_common_targets tests because it doesn't make sense.
it was originally designed for when we had listener per pipeline
but that was changed 726b2d4d67ada3df07f36ecfd81b0cf72881e159
- remove testing workload partitioning path in standard notification
agent tests
- correct test_unique test to properly validate a single target
rather than the number of listeners we have.
- add test to ensure group_state is updated when a member joins
- add test to verify that listener assigned topics based on hashring

Closes-Bug: #1729617
Change-Id: I5039c93e6845a148c24094f755a78870d49ec19f
(cherry picked from commit 75cc518c2f86afd02a7e60df150148c8a0f2e813)
---
 ceilometer/notification.py                       | 28 +++++++--------
 ceilometer/tests/functional/test_notification.py | 43 ++++++++++--------------
 2 files changed, 30 insertions(+), 41 deletions(-)

diff --git a/ceilometer/notification.py b/ceilometer/notification.py
index fc9a2eb..ae1bf5f 100644
--- a/ceilometer/notification.py
+++ b/ceilometer/notification.py
@@ -26,7 +26,6 @@ from futurist import periodics
 from oslo_config import cfg
 from oslo_log import log
 import oslo_messaging
-import six
 from stevedore import extension
 from tooz import coordination
 
@@ -128,6 +127,9 @@ class NotificationService(cotyledon.Service):
                                str(uuid.uuid4()).encode('ascii'))
             self.partition_coordinator = coordination.get_coordinator(
                 self.conf.coordination.backend_url, coordination_id)
+            self.partition_set = list(range(
+                self.conf.notification.pipeline_processing_queues))
+            self.group_state = None
         else:
             self.partition_coordinator = None
 
@@ -190,7 +192,7 @@ class NotificationService(cotyledon.Service):
         self.transport = messaging.get_transport(self.conf)
 
         if self.conf.notification.workload_partitioning:
-            self.partition_coordinator.start()
+            self.partition_coordinator.start(start_heart=True)
         else:
             # FIXME(sileht): endpoint uses the notification_topics option
             # and it should not because this is an oslo_messaging option
@@ -210,20 +212,19 @@ class NotificationService(cotyledon.Service):
             self.hashring = self.partition_coordinator.join_partitioned_group(
                 self.NOTIFICATION_NAMESPACE)
 
-            @periodics.periodic(spacing=self.conf.coordination.check_watchers,
-                                run_immediately=True)
+            @periodics.periodic(spacing=self.conf.coordination.check_watchers)
             def run_watchers():
                 self.partition_coordinator.run_watchers()
+                if self.group_state != self.hashring.ring.nodes:
+                    self.group_state = self.hashring.ring.nodes.copy()
+                    self._refresh_agent()
 
             self.periodic = periodics.PeriodicWorker.create(
                 [], executor_factory=lambda:
                 futures.ThreadPoolExecutor(max_workers=10))
             self.periodic.add(run_watchers)
-
             utils.spawn_thread(self.periodic.start)
-            # configure pipelines after all coordination is configured.
-            with self.coord_lock:
-                self._configure_pipeline_listener()
+            self._refresh_agent()
 
     def _configure_main_queue_listeners(self, pipe_manager,
                                         event_pipe_manager):
@@ -266,7 +267,7 @@ class NotificationService(cotyledon.Service):
             )
             self.listeners.append(listener)
 
-    def _refresh_agent(self, event):
+    def _refresh_agent(self):
         with self.coord_lock:
             if self.shutdown:
                 # NOTE(sileht): We are going to shutdown we everything will be
@@ -278,13 +279,8 @@ class NotificationService(cotyledon.Service):
         ev_pipes = self.event_pipeline_manager.pipelines
         pipelines = self.pipeline_manager.pipelines + ev_pipes
         transport = messaging.get_transport(self.conf)
-        partitioned = six.moves.range(
-            self.conf.notification.pipeline_processing_queues
-        )
-
-        if self.partition_coordinator:
-            partitioned = list(filter(
-                self.hashring.belongs_to_self, partitioned))
+        partitioned = list(filter(
+            self.hashring.belongs_to_self, self.partition_set))
 
         endpoints = []
         targets = []
diff --git a/ceilometer/tests/functional/test_notification.py b/ceilometer/tests/functional/test_notification.py
index 15bf78f..2f4228d 100644
--- a/ceilometer/tests/functional/test_notification.py
+++ b/ceilometer/tests/functional/test_notification.py
@@ -101,8 +101,6 @@ class TestNotification(tests_base.BaseTestCase):
         self.CONF = service.prepare_service([], [])
         self.CONF.set_override("connection", "log://", group='database')
         self.CONF.set_override("backend_url", "zake://", group="coordination")
-        self.CONF.set_override("workload_partitioning", True,
-                               group='notification')
         self.setup_messaging(self.CONF)
         self.srv = notification.NotificationService(0, self.CONF)
 
@@ -117,8 +115,6 @@ class TestNotification(tests_base.BaseTestCase):
             ]
         )
 
-    @mock.patch('ceilometer.pipeline.setup_pipeline', mock.MagicMock())
-    @mock.patch('ceilometer.pipeline.setup_event_pipeline', mock.MagicMock())
     @mock.patch('ceilometer.event.endpoint.EventsNotificationEndpoint')
     def _do_process_notification_manager_start(self,
                                                fake_event_endpoint_class):
@@ -147,15 +143,12 @@ class TestNotification(tests_base.BaseTestCase):
 
         self.assertEqual(2, len(self.srv.listeners[0].dispatcher.endpoints))
 
-    @mock.patch('ceilometer.pipeline.setup_event_pipeline', mock.MagicMock())
     def test_process_notification_with_events(self):
         self._do_process_notification_manager_start()
         self.assertEqual(2, len(self.srv.listeners[0].dispatcher.endpoints))
         self.assertEqual(self.fake_event_endpoint,
                          self.srv.listeners[0].dispatcher.endpoints[0])
 
-    @mock.patch('ceilometer.pipeline.setup_pipeline', mock.MagicMock())
-    @mock.patch('ceilometer.pipeline.setup_event_pipeline', mock.MagicMock())
     @mock.patch('oslo_messaging.get_batch_notification_listener')
     def test_unique_consumers(self, mock_listener):
 
@@ -170,8 +163,8 @@ class TestNotification(tests_base.BaseTestCase):
             get_nm.side_effect = fake_get_notifications_manager_dup_targets
             self.srv.run()
             self.addCleanup(self.srv.terminate)
-            self.assertEqual(2, len(mock_listener.call_args_list))
-            args, kwargs = mock_listener.call_args
+            # 1 target, 1 listener
+            self.assertEqual(1, len(mock_listener.call_args_list[0][0][1]))
             self.assertEqual(1, len(self.srv.listeners))
 
 
@@ -308,7 +301,7 @@ class TestRealNotificationHA(BaseRealNotification):
             override_pool_size=self.CONF.max_parallel_requests)
         m_listener.reset_mock()
         self.CONF.set_override('batch_size', 2, group='notification')
-        self.srv._refresh_agent(None)
+        self.srv._refresh_agent()
         m_listener.assert_called_with(override_pool_size=1)
 
     @mock.patch('oslo_messaging.get_batch_notification_listener')
@@ -323,11 +316,11 @@ class TestRealNotificationHA(BaseRealNotification):
         self.addCleanup(self.srv.terminate)
 
         listener = self.srv.pipeline_listener
-        self.srv._configure_pipeline_listener()
+        self.srv._refresh_agent()
         self.assertIsNot(listener, self.srv.pipeline_listener)
 
     @mock.patch('oslo_messaging.get_batch_notification_listener')
-    def test_retain_common_targets_on_refresh(self, mock_listener):
+    def test_hashring_targets(self, mock_listener):
         maybe = {"maybe": 0}
 
         def _once_over_five(item):
@@ -340,20 +333,14 @@ class TestRealNotificationHA(BaseRealNotification):
         pc.join_partitioned_group.return_value = hashring
         self.srv.run()
         self.addCleanup(self.srv.terminate)
-        listened_before = [target.topic for target in
-                           mock_listener.call_args[0][1]]
-        self.assertEqual(4, len(listened_before))
-        self.srv._refresh_agent(None)
-        listened_after = [target.topic for target in
-                          mock_listener.call_args[0][1]]
-        self.assertEqual(4, len(listened_after))
-        common = set(listened_before) & set(listened_after)
+        topics = [target.topic for target in mock_listener.call_args[0][1]]
+        self.assertEqual(4, len(topics))
         self.assertEqual(
             {'ceilometer-pipe-test_pipeline:test_sink-4',
              'ceilometer-pipe-event:test_event:test_sink-4',
              'ceilometer-pipe-event:test_event:test_sink-9',
              'ceilometer-pipe-test_pipeline:test_sink-9'},
-            common)
+            set(topics))
 
     @mock.patch('oslo_messaging.get_batch_notification_listener')
     def test_notify_to_relevant_endpoint(self, mock_listener):
@@ -471,6 +458,7 @@ class TestRealNotificationMultipleAgents(tests_base.BaseTestCase):
                                group='notification')
         self.CONF.set_override('pipeline_processing_queues', 2,
                                group='notification')
+        self.CONF.set_override('check_watchers', 1, group='coordination')
         self.publisher = test_publisher.TestPublisher(self.CONF, "")
         self.publisher2 = test_publisher.TestPublisher(self.CONF, "")
 
@@ -485,9 +473,10 @@ class TestRealNotificationMultipleAgents(tests_base.BaseTestCase):
 
         self.srv = notification.NotificationService(0, self.CONF)
         self.srv.partition_coordinator = pc = mock.MagicMock()
-        hashring = mock.MagicMock()
-        hashring.belongs_to_self = _sometimes_srv
-        pc.join_partitioned_group.return_value = hashring
+        hashring_srv1 = mock.MagicMock()
+        hashring_srv1.belongs_to_self = _sometimes_srv
+        hashring_srv1.ring.nodes = {'id1': mock.Mock()}
+        pc.join_partitioned_group.return_value = hashring_srv1
         self.srv.run()
         self.addCleanup(self.srv.terminate)
 
@@ -499,6 +488,8 @@ class TestRealNotificationMultipleAgents(tests_base.BaseTestCase):
         self.srv2.partition_coordinator = pc = mock.MagicMock()
         hashring = mock.MagicMock()
         hashring.belongs_to_self = _sometimes_srv2
+        hashring.ring.nodes = {'id1': mock.Mock(), 'id2': mock.Mock()}
+        self.srv.hashring.ring.nodes = hashring.ring.nodes.copy()
         pc.join_partitioned_group.return_value = hashring
         self.srv2.run()
         self.addCleanup(self.srv2.terminate)
@@ -516,7 +507,8 @@ class TestRealNotificationMultipleAgents(tests_base.BaseTestCase):
             start = time.time()
             while time.time() - start < 10:
                 if (len(self.publisher.samples + self.publisher2.samples) >=
-                        self.expected_samples):
+                        self.expected_samples and
+                        len(self.srv.group_state) == 2):
                     break
                 time.sleep(0.1)
 
@@ -526,6 +518,7 @@ class TestRealNotificationMultipleAgents(tests_base.BaseTestCase):
             s.resource_id for s in self.publisher.samples)))
         self.assertEqual(1, len(set(
             s.resource_id for s in self.publisher2.samples)))
+        self.assertEqual(2, len(self.srv.group_state))
 
     @mock.patch('ceilometer.publisher.test.TestPublisher')
     def test_multiple_agents_no_transform(self, fake_publisher_cls):
-- 
cgit v1.1

