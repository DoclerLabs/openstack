---

- name: create neutron vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ neutron_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create neutron user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ neutron_rabbit_user }}" password="{{ neutron_rabbit_password }}"
      vhost="{{ neutron_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the neutron vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ neutron_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask autostarting of neutron server
  service_mask: name={{ item }} state=masked
  with_items:
    - neutron-server
  when: inventory_hostname in groups['neutron_controller']

- name: mask autostarting of neutron L2 agent
  service_mask: name=neutron-{{ item }}-agent state=masked
  with_items: "{{ neutron_physical_interface_drivers }}"
  when: inventory_hostname in groups['neutron_l2']

- name: mask autostarting of neutron L3 services
  service_mask: name={{ item }} state=masked
  with_items:
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
  when: inventory_hostname in groups['neutron_l3']

- name: turn off rp filtering
  lineinfile: >
    regexp='^{{ item.key }}'
    line='{{ item.key }} = {{ item.value }}'
    dest=/etc/sysctl.d/10-neutron.conf owner=root group=root mode=0644
    create=yes
  with_dict:
    { 'net.ipv4.conf.all.rp_filter' : 0,
      'net.ipv4.conf.default.rp_filter': 0
    }
  notify: reload sysctl

- name: turn on ip forwarding
  lineinfile: >
    regexp='^{{ item.key }}'
    line='{{ item.key }} = {{ item.value }}'
    dest=/etc/sysctl.d/10-neutron.conf owner=root group=root mode=0644
    create=yes
  with_dict:
    { 'net.ipv4.ip_forward' : 1 }
  notify: reload sysctl
  when: inventory_hostname in groups['neutron_l3']

- name: set nf_conntrack_max
  lineinfile: >
    regexp='^{{ item.key }}'
    line='{{ item.key }} = {{ item.value }}'
    dest=/etc/sysctl.d/10-conntrack.conf owner=root group=root mode=0644
    create=yes
  with_dict:
    { 'net.netfilter.nf_conntrack_max' : "{{ sysctl_conntrack_max }}" }
  notify: reload sysctl
  when: inventory_hostname in groups['neutron_l2']

- name: add an udev rule for setting nf_conntrack_max
  copy: content='ACTION=="add", SUBSYSTEM=="module", KERNEL=="nf_conntrack", RUN+="/lib/systemd/systemd-sysctl --prefix=/net/netfilter"\n'
    dest=/etc/udev/rules.d/99-conntrack.rules owner=root group=root mode=0644
  when: inventory_hostname in groups['neutron_l2']

- name: insert br_netfilter module
  modprobe: name=br_netfilter
  when: ansible_kernel is version_compare('3.18', '>=')

- name: make sure br_netfilter module is loaded at boot
  lineinfile: dest=/etc/modules line='br_netfilter' owner=root group=root mode=0644

- name: install vpn service provider
  apt: name={{ neutron_vpnaas_type }}
  when: inventory_hostname in groups['neutron_l3'] and neutron_vpnaas_type

- name: install neutron server packages
  apt:
    name:
    - neutron-server
    - neutron-plugin-ml2
    - python3-neutronclient
  when: inventory_hostname in groups['neutron_controller']

- name: install conntrack
  apt: name=conntrack
  when: inventory_hostname in groups['neutron_l2']
 
- name: install neutron L2 agent
  apt: name=neutron-{{ item }}-agent
  with_items: "{{ neutron_physical_interface_drivers }}"
  when: inventory_hostname in groups['neutron_l2']

- name: install neutron L3 packages
  apt:
    name:
    - keepalived
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - python3-neutron-vpnaas
    - python3-neutronclient
  when: inventory_hostname in groups['neutron_l3']

- name: stop and disable strongswan
  service: name=strongswan state=stopped enabled=no
  when: inventory_hostname in groups['neutron_l3'] and neutron_vpnaas_type == 'strongswan'

- name: disable apparmor strongswan profiles
  file: path=/etc/apparmor.d/disable/{{ item }} src=/etc/apparmor.d/{{ item }} state=link
  with_items:
    - usr.lib.ipsec.charon
    - usr.lib.ipsec.stroke
  when: inventory_hostname in groups['neutron_l3'] and neutron_vpnaas_type == 'strongswan'
  notify: reload apparmor

- name: create neutron database
  mysql_db: name={{ neutron_db }}
    login_host={{ neutron_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  when: inventory_hostname == groups['neutron_controller'][0]

- name: create neutron database user
  mysql_user: name={{ neutron_db_user }} password={{ neutron_db_password }} host={{ item }} priv={{ neutron_db }}.*:ALL
    login_host={{ neutron_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  when: inventory_hostname == groups['neutron_controller'][0]
  with_items:
    - localhost
    - '%'

- name: install neutron.conf
  template: src={{ item }}.j2 dest=/etc/neutron/{{ item }} owner=neutron group=root mode=0460
  with_items:
    - neutron.conf
  notify:
    - restart neutron-server
    - restart neutron-l3-agent
    - restart neutron-dhcp-agent
    - restart neutron-metadata-agent
    - restart neutron-l2-agent

- name: install ml2_conf.ini
  template: src=ml2_conf.ini.j2 dest=/etc/neutron/plugins/ml2/ml2_conf.ini owner=neutron group=root mode=0460
  when: inventory_hostname in groups['neutron_controller']
  notify:
    - restart neutron-server

- name: install L3 agent configs
  template: src={{ item }}.j2 dest=/etc/neutron/{{ item }} owner=neutron group=root mode=0460
  with_items:
    - l3_agent.ini
    - fwaas_driver.ini
    - vpn_agent.ini
  when: inventory_hostname in groups['neutron_l3']
  notify:
    - restart neutron-l3-agent

- name: install metadata_agent.ini
  template: src=metadata_agent.ini.j2 dest=/etc/neutron/metadata_agent.ini owner=neutron group=root mode=0460
  when: inventory_hostname in groups['neutron_l3']
  notify:
    - restart neutron-metadata-agent

- name: install dhcp agent configs
  template: src={{ item }}.j2 dest=/etc/neutron/{{ item }} owner=neutron group=root mode=0460
  with_items:
    - dhcp_agent.ini
    - dnsmasq-neutron.conf
  when: inventory_hostname in groups['neutron_l3']
  notify:
    - restart neutron-dhcp-agent

- name: install L2 agent config
  template: src="{{ item }}_agent.ini.j2" dest="/etc/neutron/plugins/ml2/{{ item }}_agent.ini" owner=neutron group=root mode=0460
  when: inventory_hostname in groups['neutron_l2']
  with_items: "{{ neutron_physical_interface_drivers }}"
  notify:
    - restart neutron-l2-agent

- name: sync neutron db
  command: su neutron -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  when: inventory_hostname == groups['neutron_controller'][0]

- name: unmask autostarting of neutron server
  service_mask: name={{ item }} state=unmasked
  with_items:
    - neutron-server
  when: inventory_hostname in groups['neutron_controller']

- name: unmask autostarting of neutron L2 agent
  service_mask: name=neutron-{{ item }}-agent state=unmasked
  with_items: "{{ neutron_physical_interface_drivers }}"
  when: inventory_hostname in groups['neutron_l2']

- name: unmask autostarting of neutron L3 services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
  when: inventory_hostname in groups['neutron_l3']

- meta: flush_handlers

- name: ensure neutron server is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - neutron-server
  when: inventory_hostname in groups['neutron_controller']

- name: ensure neutron L2 agent is started
  service: name=neutron-{{ item }}-agent state=started enabled=yes
  with_items: "{{ neutron_physical_interface_drivers }}"
  when: inventory_hostname in groups['neutron_l2']

- name: ensure neutron L3 services are started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - neutron-l3-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
  when: inventory_hostname in groups['neutron_l3']
