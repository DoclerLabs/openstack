---

- name: create nova vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ nova_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create nova user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ nova_rabbit_user }}" password="{{ nova_rabbit_password }}"
      vhost="{{ nova_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the nova vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ nova_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: mask nova-placement-api apache config
  copy: content='' dest=/etc/apache2/sites-available/nova-placement-api.conf owner=root group=root mode=0644
  when: inventory_hostname in groups['nova_controller']

- name: mask autostarting of nova controller services
  service_mask: name={{ item }} state=masked
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - nova-consoleauth
    - nova-spiceproxy
    - nova-novncproxy
    - nova-cert
  when: inventory_hostname in groups['nova_controller']

- name: mask autostarting of nova compute services
  service_mask: name={{ item }} state=masked
  with_items:
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: install nova controller packages
  apt:
    name:
    - nova-api
    - nova-placement-api
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-spiceproxy
    - nova-scheduler
    - python3-nova
    - python3-novaclient
  when: inventory_hostname in groups['nova_controller']

- name: ensure nova-cert is not installed
  apt: name=nova-cert state=absent
  when: inventory_hostname in groups['nova_controller']

- name: install nova compute packages
  apt:
    name:
    - ceph-common
    - python3-rbd
    - python3-rados
    - sysfsutils
    - ovmf
    - python3-nova
    - nova-compute-{{ nova_compute_package }}
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: create nova databases
  mysql_db: name={{ item }}
    login_host={{ nova_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  with_items:
    - "{{ nova_api_db }}"
    - "{{ nova_cell0_db }}"
    - "{{ nova_db }}"
  when: inventory_hostname == groups['nova_controller'][0]

- name: create nova database users
  mysql_user: name={{ item.0.user }} password={{ item.0.password }} host='{{ item.1 }}' priv={{ item.0.db }}.*:ALL
    login_host={{ nova_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  when: inventory_hostname == groups['nova_controller'][0]
  with_nested:
    -
      - { db: '{{ nova_api_db }}', user: '{{ nova_api_db_user }}', password: '{{ nova_api_db_password }}' }
      - { db: '{{ nova_cell0_db }}', user: '{{ nova_cell0_db_user }}', password: '{{ nova_cell0_db_password }}' }
      - { db: '{{ nova_db }}', user: '{{ nova_db_user }}', password: '{{ nova_db_password }}' }
    -
      - '%'
      - 'localhost'

- name: install certificates
  copy: src={{ item.src }} dest={{ item.dest }} owner=nova group=root mode={{ item.mode }}
  with_items:
    - { src: '{{ SSLCertificateKeyFileSource | default("") }}', dest: '{{ SSLCertificateKeyFile }}', mode: '0460' }
    - { src: '{{ SSLCertificateFileSource | default("") }}', dest: '{{ SSLCertificateFile }}', mode: '0464' }
  when: inventory_hostname in groups['nova_controller'] and item.src != '' and nova_console_ssl | bool

- name: collect ceph backends
  set_fact:
    nova_ceph_backend:
      - backend: ceph
        ceph_user: "{{ nova_ephemeral_ceph_user }}"
        volume_secret_uuid: "{{ nova_ephemeral_volume_secret_uuid }}"
  when: nova_ephemeral_backend == 'ceph'

- name: install virsh secret.xml
  template: src=secret.xml.j2 dest=/root/{{ item.volume_secret_uuid }}.xml owner=root group=root mode=0664
  with_items: "{{ cinder_backends }} + {{ nova_ceph_backend | default([]) }}"
  when: inventory_hostname in groups['nova_compute'] and item.backend=='ceph' and nova_compute_package in ('qemu','kvm')

- name: configure virsh secret.xml
  command: virsh secret-define --file /root/{{ item.volume_secret_uuid }}.xml
  with_items: "{{ cinder_backends }} + {{ nova_ceph_backend | default([]) }}"
  when: inventory_hostname in groups['nova_compute'] and item.backend=='ceph' and nova_compute_package in ('qemu','kvm')

- name: stop default libvirt network
  command: virsh net-destroy default
  register: virsh_result
  failed_when: virsh_result is failed and 'Network not found' not in virsh_result.stderr
  changed_when: virsh_result is success
  when: inventory_hostname in groups['nova_compute'] and nova_compute_package in ('qemu','kvm')

- name: remove default libvirt network
  command: virsh net-undefine default
  register: virsh_result
  failed_when: virsh_result is failed and 'Network not found' not in virsh_result.stderr
  changed_when: virsh_result is success
  when: inventory_hostname in groups['nova_compute'] and nova_compute_package in ('qemu','kvm')

- name: install nova configs
  template: src=nova.conf.j2 dest=/etc/nova/nova.conf owner=nova group=root mode=0460
  notify:
    - signal apache to reload
    - restart nova controller services
    - restart nova compute services

- name: clear nova-compute.conf
  copy: content='' dest=/etc/nova/nova-compute.conf owner=nova group=root mode=0460
  when: inventory_hostname in groups['nova_compute']
  notify:
    - restart nova compute services

- name: try to sync nova API db
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage api_db sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  failed_when: db_sync is failed and 'Cell mappings are not created' not in db_sync.stdout
  when: inventory_hostname == groups['nova_controller'][0]

- name: do cellv2 setup - cell0
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage cell_v2 map_cell0 --database_connection
    mysql+pymysql://{{ nova_cell0_db_user }}:{{ nova_cell0_db_password }}@{{ nova_mysql_server }}/{{ nova_cell0_db }}?charset=utf8"
  register: create_cell0
  changed_when: '"Cell0 is already setup" not in create_cell0.stdout'
  when: inventory_hostname == groups['nova_controller'][0]

- name: do cellv2 setup - create cell
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage cell_v2 create_cell"
  register: create_cell
  changed_when: create_cell is success and 'already exists' not in create_cell.stdout
  failed_when: create_cell is failed and 'already exists' not in create_cell.stdout
  when: inventory_hostname == groups['nova_controller'][0]

- name: sync nova API db
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage api_db sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  when: inventory_hostname == groups['nova_controller'][0]

- name: sync nova db
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage db sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  when: inventory_hostname == groups['nova_controller'][0]

- name: do online migrations
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage db online_data_migrations"
  register: db_sync
  changed_when: '"migrated" in db_sync.stderr'
  when: inventory_hostname == groups['nova_controller'][0]

- name: create /var/www/cgi-bin/nova
  file: path=/var/www/cgi-bin/nova state=directory owner=root group=root mode=0755
  when: inventory_hostname in groups['nova_controller']
  notify: signal apache to reload

#- name: link nova wsgi servers
#  file: src=/usr/lib/python2.7/dist-packages/nova/wsgi/{{ item }}.py dest=/var/www/cgi-bin/nova/{{ item }} state=link
#  with_items:
#    - nova-api
#    - nova-metadata
#  when: inventory_hostname in groups['nova_controller']
#  notify: signal apache to reload

- name: link nova-placement-api
  file: src=/usr/bin/nova-placement-api dest=/var/www/cgi-bin/nova/placement-api state=link
  when: inventory_hostname in groups['nova_controller']
  notify: signal apache to reload

- name: unmask autostarting of nova controller services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - nova-consoleauth
    - nova-spiceproxy
    - nova-novncproxy
  when: inventory_hostname in groups['nova_controller']

- name: unmask autostarting of nova compute services
  service_mask: name={{ item }} state=unmasked
  with_items:
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- meta: flush_handlers

- name: ensure nova controller servies are started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-spiceproxy
  when: inventory_hostname in groups['nova_controller']

- name: ensure nova compute is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: do cellv2 setup - discover new hosts
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage cell_v2 discover_hosts"
  when: inventory_hostname == groups['nova_controller'][0]

- name: create ssh key for nova-compute
  local_action: command ssh-keygen -f "{{ playbook_dir }}/files/nova_id_rsa" -b 2048 -P ""
                creates="{{ playbook_dir }}/files/nova_id_rsa.pub"
  run_once: True
  become: False

- name: make sure .ssh directory exists
  file: path=/var/lib/nova/.ssh state=directory owner=nova group=nova mode=0750
  when: inventory_hostname in groups['nova_compute']

- name: install the public key for nova-compute
  copy: src=files/nova_id_rsa.pub dest=/var/lib/nova/.ssh/authorized_keys owner=nova group=root mode=0640
  when: inventory_hostname in groups['nova_compute']

- name: install the private key for nova-compute
  copy: src=files/nova_id_rsa dest=/var/lib/nova/.ssh/id_rsa owner=nova group=nova mode=0600
  when: inventory_hostname in groups['nova_compute']

- name: install the ssh config for nova-compute
  copy: content='Host *\nStrictHostKeyChecking no\nUserKnownHostsFile=/dev/null\n' dest=/var/lib/nova/.ssh/config owner=nova group=nova mode=0640
  when: inventory_hostname in groups['nova_compute']

- name: set the login shell to /bin/sh on compute hosts for nova
  user: name=nova shell=/bin/sh
  when: inventory_hostname in groups['nova_compute']
