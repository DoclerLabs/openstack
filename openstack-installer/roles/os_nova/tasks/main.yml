---

- name: create nova vhost in rabbitmq
  rabbitmq_vhost: node="rabbit@{{ groups['rabbitmq'][0] }}" name="{{ nova_rabbit_vhost }}"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: create nova user in rabbitmq
  rabbitmq_user: node="rabbit@{{ groups['rabbitmq'][0] }}"
      user="{{ nova_rabbit_user }}" password="{{ nova_rabbit_password }}"
      vhost="{{ nova_rabbit_vhost }}"
      configure_priv=".*" read_priv=".*" write_priv=".*"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: ensure the nova vhost contains the HA policy
  rabbitmq_policy:
    node: "rabbit@{{ groups['rabbitmq'][0] }}"
    vhost: "{{ nova_rabbit_vhost }}"
    name: HA
    pattern: '.*'
    tags:
      "ha-mode": "all"
      "ha-sync-mode": "automatic"
  delegate_to: "{{ groups['rabbitmq'][0] }}"
  run_once: True

- name: install CA certificate
  copy: src="{{ SSLCACertificateFileSource }}" dest="{{ SSLCACertificateFile }}" owner=root group=root mode=0644
  when: SSLCACertificateFile != ''

- name: disable autostarting of nova controller services
  copy: content='manual' dest=/etc/init/{{ item }}.override owner=root group=root mode=0644 force=no
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - nova-consoleauth
    - nova-spiceproxy
    - nova-novncproxy
    - nova-cert
  when: inventory_hostname in groups['nova_controller']

- name: disable autostarting of nova compute services
  copy: content='manual' dest=/etc/init/{{ item }}.override owner=root group=root mode=0644 force=no
  with_items:
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: install nova controller packages
  apt: name={{ item }}
  with_items:
    - nova-api
    - nova-cert
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-spiceproxy
    - nova-scheduler
    - python-novaclient
  when: inventory_hostname in groups['nova_controller']

- name: install nova compute packages
  apt: name={{ item }}
  with_items:
    - ceph-common
    - python-rbd
    - python-rados
    - sysfsutils
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: create nova databases
  mysql_db: name={{ item }}
    login_host={{ nova_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  with_items:
    - "{{ nova_api_db }}"
    - "{{ nova_db }}"
  when: inventory_hostname == groups['nova_controller'][0]

- name: create nova database users
  mysql_user: name={{ item.0.user }} password={{ item.0.password }} host='{{ item.1 }}' priv={{ item.0.db }}.*:ALL
    login_host={{ nova_mysql_server }} login_user=root login_password={{ mysql_root_password }}
    state=present
  when: inventory_hostname == groups['nova_controller'][0]
  with_nested:
    -
      - { db: '{{ nova_api_db }}', user: '{{ nova_api_db_user }}', password: '{{ nova_api_db_password }}' }
      - { db: '{{ nova_db }}', user: '{{ nova_db_user }}', password: '{{ nova_db_password }}' }
    -
      - '%'
      - 'localhost'

- name: install certificates
  copy: src={{ item.src }} dest={{ item.dest }} owner=nova group=root mode={{ item.mode }}
  with_items:
    - { src: '{{ SSLCertificateKeyFileSource | default("") }}', dest: '{{ SSLCertificateKeyFile }}', mode: '0460' }
    - { src: '{{ SSLCertificateFileSource | default("") }}', dest: '{{ SSLCertificateFile }}', mode: '0464' }
  when: inventory_hostname in groups['nova_controller'] and item.src != '' and nova_novncproxy_ssl

- name: install virsh secret.xml
  template: src=secret.xml.j2 dest=/root/secret.xml owner=root group=root mode=0664
  when: inventory_hostname in groups['nova_compute'] and cinder_backend=='ceph'

- name: configure virsh secret.xml
  command: virsh secret-define --file /root/secret.xml
  when: inventory_hostname in groups['nova_compute'] and cinder_backend=='ceph'

- name: install nova configs
  template: src=nova.conf.j2 dest=/etc/nova/nova.conf owner=nova group=root mode=0460
  notify:
    - restart nova controller services
    - restart nova compute services

- name: clear nova-compute.conf
  copy: content='' dest=/etc/nova/nova-compute.conf owner=nova group=root mode=0460
  when: inventory_hostname in groups['nova_compute']
  notify:
    - restart nova compute services

- name: sync nova db
  command: su nova -s /bin/sh -c "/usr/bin/nova-manage {{ item }} sync"
  register: db_sync
  changed_when: '"migrate.versioning.api" in db_sync.stderr'
  with_items:
    - api_db
    - db
  when: inventory_hostname == groups['nova_controller'][0]

- meta: flush_handlers

- name: ensure nova controller servies are started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - nova-api
    - nova-scheduler
    - nova-conductor
    - nova-consoleauth
    - nova-novncproxy
    - nova-spiceproxy
    - nova-cert
  when: inventory_hostname in groups['nova_controller']

- name: ensure nova compute is started
  service: name={{ item }} state=started enabled=yes
  with_items:
    - nova-compute
  when: inventory_hostname in groups['nova_compute']

- name: create ssh key for nova-compute
  local_action: command ssh-keygen -f "{{ playbook_dir }}/workdir/nova_id_rsa" -b 2048 -P ""
                creates="{{ playbook_dir }}/workdir/nova_id_rsa.pub"
  run_once: True
  become: False

- name: make sure .ssh directory exists
  file: path=/var/lib/nova/.ssh state=directory owner=nova group=nova mode=0750
  when: inventory_hostname in groups['nova_compute']

- name: install the public key for nova-compute
  copy: src=workdir/nova_id_rsa.pub dest=/var/lib/nova/.ssh/authorized_keys owner=nova group=root mode=0640
  when: inventory_hostname in groups['nova_compute']

- name: install the private key for nova-compute
  copy: src=workdir/nova_id_rsa dest=/var/lib/nova/.ssh/id_rsa owner=nova group=nova mode=0600
  when: inventory_hostname in groups['nova_compute']

- name: install the ssh config for nova-compute
  copy: content='Host *\nStrictHostKeyChecking no\nUserKnownHostsFile=/dev/null\n' dest=/var/lib/nova/.ssh/config owner=nova group=nova mode=0640
  when: inventory_hostname in groups['nova_compute']

- name: set the login shell to /bin/sh on compute hosts for nova
  user: name=nova shell=/bin/sh
  when: inventory_hostname in groups['nova_compute']
