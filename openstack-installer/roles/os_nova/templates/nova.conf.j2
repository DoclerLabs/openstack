{% set host_index = groups[(inventory_hostname in groups['nova_controller']) | ternary('nova_controller', 'nova_compute')].index(inventory_hostname) % groups['rabbitmq'] | count %}
{% set rabbit_hosts = groups['rabbitmq'][host_index:] + groups['rabbitmq'][:host_index] %}
[DEFAULT]
# Logs / State
debug = {{ nova_debug }}
verbose = True
use_stderr = False
use_syslog = {{ nova_syslog_use }}
log_dir = /var/log/nova
rootwrap_config = /etc/nova/rootwrap.conf
service_down_time = {{ nova_service_down_time }}

host = {{ inventory_hostname }}
state_path = /var/lib/nova

# Compute
compute_driver = {{ nova_compute_driver }}

instances_path = /var/lib/nova/instances
instance_name_template = instance-%08x
allow_resize_to_same_host = True
osapi_compute_listen = 127.0.0.1
osapi_compute_workers = {{ nova_api_workers }}
enabled_apis = osapi_compute, metadata

cpu_allocation_ratio = {{ nova_cpu_allocation_ratio }}
ram_allocation_ratio = {{ nova_ram_allocation_ratio }}
disk_allocation_ratio = {{ nova_disk_allocation_ratio }}


default_schedule_zone = {{ nova_default_schedule_zone }}

# Rpc all
transport_url = rabbit://{% for host in rabbit_hosts %}{{ nova_rabbit_user }}:{{ nova_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ nova_rabbit_vhost }}

# Metadata
metadata_host = {{ vip_mgmt }}
metadata_listen = 127.0.0.1
metadata_workers = {{ nova_metadata_workers }}

# Network
my_ip = {{ ip.mgmt }}
security_group_api = neutron
{% if neutron_mtu > 0 %}
network_device_mtu = {{ neutron_mtu }}
{% endif %}

{% if 'openvswitch' in neutron_physical_interface_drivers %}
linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver
{% elif 'linuxbridge' in neutron_physical_interface_drivers  %}
linuxnet_interface_driver = nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver
{% endif %}

## Vif
vif_plugging_timeout = 10
vif_plugging_is_fatal = False

# Hypervisor
default_ephemeral_format = ext4
resume_guests_state_on_host_boot = {{ nova_resume_guests_state_on_host_boot }}

reclaim_instance_interval = {{ nova_reclaim_instance_interval }}

# Ceilometer notification configurations
instance_usage_audit = {{ nova_instance_usage_audit }}
instance_usage_audit_period = {{ nova_instance_usage_audit_period }}

#console ssl
{% if nova_console_ssl | bool %}
ssl_only=True
key={{ SSLCertificateKeyFile }}
cert={{ SSLCertificateFile }}
{% endif %}

[pci]
{% for entry in nova_pci_passthrough_whitelist %}
passthrough_whitelist = {{ entry }}
{% endfor %}
{% for entry in nova_pci_aliases %}
alias = {{ entry }}
{% endfor %}

[crypto]

keys_path = /var/lib/nova/keys


[cache]

enabled = True
backend = oslo_cache.memcache_pool
memcache_servers = {% for host in groups['memcached'] %}{{ hostvars[host].ip.mgmt }}:11211{% if not loop.last %},{% endif %}{% endfor %}


[vnc]

enabled = {{ nova_vnc_console_enable }}
novncproxy_host = {{ ip.mgmt }}
keymap = {{ nova_console_keymap }}
novncproxy_base_url = {{ nova_novncproxy_base_url }}
server_listen = {{ ip.mgmt }}
server_proxyclient_address = {{ ip.mgmt }}

[spice]

agent_enabled = {{ nova_spice_console_enable }}
enabled = {{ nova_spice_console_enable }}
keymap = {{ nova_console_keymap }}
html5proxy_base_url = {{ nova_spiceproxy_base_url }}
html5proxy_host = {{ ip.mgmt }}
server_listen = {{ ip.mgmt }}
server_proxyclient_address = {{ ip.mgmt }}

[serial_console]

{% if inventory_hostname in groups['nova_controller'] %}
serialproxy_host = {{ ip.mgmt }}
serialproxy_port = 6083
{% endif %}
{% if inventory_hostname in groups['nova_compute'] %}
enabled = {{ nova_serial_console_enable }}
base_url = {{ nova_serialconsole_base_url }}
proxyclient_address = {{ ip.mgmt }}
port_range = {{ nova_serialconsole_port_range }}
{% endif %}

[cinder]

catalog_info = volumev3:cinderv3:internalURL
os_region_name = {{ keystone_region_name }}
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[glance]

endpoint_override = {{ os_proto }}://{{ os_internal_address }}:9292
region_name = {{ keystone_region_name }}
valid_interfaces = internal
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[neutron]

auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
auth_type = password
endpoint_override = {{ os_proto }}://{{ os_internal_address }}:9696
region_name = {{ keystone_region_name }}
valid_interfaces = internal
user_domain_name = {{ neutron_domain_name }}
username = {{ neutron_admin_user }}
password = {{ neutron_admin_password }}
project_domain_name = {{ neutron_project_domain_name }}
project_name = {{ neutron_project_name }}
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}

service_metadata_proxy = True
metadata_proxy_shared_secret = {{ metadata_proxy_shared_secret }}

default_floating_pool = {{ nova_default_floating_pool }}


[conductor]

workers = {{ nova_conductor_workers }}


[keystone_authtoken]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
www_authenticate_uri = {{ keystone_proto }}://{{ keystone_public_address }}:5000
region_name = {{ keystone_region_name }}
user_domain_name = {{ nova_domain_name }}
username = {{ nova_admin_user }}
password = {{ nova_admin_password }}
project_domain_name = {{ nova_project_domain_name }}
project_name = {{ nova_project_name }}
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
service_token_roles_required = True

memcached_servers = {% for host in groups['memcached'] %}{{ hostvars[host].ip.mgmt }}:11211{% if not loop.last %},{% endif %}{% endfor %}

memcache_security_strategy = ENCRYPT
memcache_secret_key = {{ memcache_secret_key }}

{% if inventory_hostname in groups['nova_controller'] %}
[api]

auth_strategy = keystone
compute_link_prefix = {{ os_proto }}://{{ os_public_address }}:8774


[wsgi]

api_paste_config = /etc/nova/api-paste.ini


[scheduler]

host_manager = host_manager
discover_hosts_in_cells_interval = {{ nova_discover_hosts_in_cells_interval }}


[filter_scheduler]

available_filters = {{ nova_filter_scheduler_available_filters }}
enabled_filters = {{ nova_filter_scheduler_enabled_filters }}
cpu_weight_multiplier = {{ nova_cpu_weight_multiplier }}
ram_weight_multiplier = {{ nova_ram_weight_multiplier }}
disk_weight_multiplier = {{ nova_disk_weight_multiplier }}
host_subset_size = {{ nova_host_subset_size }}

[api_database]

connection = mysql+pymysql://{{ nova_api_db_user }}:{{ nova_api_db_password }}@{{ nova_mysql_server }}/{{ nova_api_db }}?charset=utf8
max_retries = -1


[database]

connection = mysql+pymysql://{{ nova_db_user }}:{{ nova_db_password }}@{{ nova_mysql_server }}/{{ nova_db }}?charset=utf8
max_retries = -1
{% endif %}

{% if groups['barbican'] | count > 0 %}

[key_manager]

backend = castellan.key_manager.barbican_key_manager.BarbicanKeyManager


[barbican]

auth_endpoint = {{ keystone_proto }}://{{ keystone_public_address }}:5000/v3
verify_ssl = {{ not ssl_insecure }}

{% endif %}


[oslo_concurrency]

lock_path = /var/lock/nova


[notifications]

notify_on_state_change = vm_and_task_state
notification_format = {{ nova_notification_format }}


[oslo_messaging_notifications]

{% if nova_notifications %}
driver = messagingv2
transport_url = rabbit://{% for host in rabbit_hosts %}{{ nova_rabbit_user }}:{{ nova_rabbit_password }}@{{ hostvars[host].ip.mgmt }}:5672{% if not loop.last %},{% endif %}{% endfor %}/{{ nova_rabbit_vhost }}
{% else %}
driver =
transport_url =
{% endif %}

[oslo_messaging_rabbit]

rabbit_ha_queues = true


[placement]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
os_region_name = {{ keystone_region_name }}
valid_interfaces = internal
user_domain_name = {{ placement_domain_name }}
username = {{ placement_admin_user }}
password = {{ placement_admin_password }}
project_domain_name = {{ placement_project_domain_name }}
project_name = {{ placement_project_name }}
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}


[service_user]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
region_name = {{ keystone_region_name }}
user_domain_name = {{ nova_domain_name }}
username = {{ nova_admin_user }}
password = {{ nova_admin_password }}
project_domain_name = {{ nova_project_domain_name }}
project_name = {{ nova_project_name }}
{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
send_service_user_token = True


{% if inventory_hostname in groups['nova_compute'] %}

{% if nova_compute_driver == 'libvirt.LibvirtDriver' %}
[libvirt]

cpu_mode = {{ nova_libvirt_cpu_mode }}
cpu_models = {{ nova_libvirt_cpu_model }}
cpu_model_extra_flags = {{ nova_libvirt_cpu_model_extra_flags }}

disk_cachemodes="network=writeback"
use_virtio_for_bridges = True
virt_type = {{ nova_libvirt_virt_type }}
live_migration_uri = qemu+ssh://nova@%s/system?keyfile=/var/lib/nova/.ssh/id_rsa&no_tty=1&no_verify=1
live_migration_tunnelled = {{ nova_live_migration_tunelled }}
live_migration_completion_timeout = {{ nova_live_migration_completion_timeout }}
live_migration_downtime = {{ nova_live_migration_downtime }}
live_migartion_downtime_delay = {{ nova_live_migration_downtime_delay }}
live_migration_downtime_steps = {{ nova_live_migration_downtime_steps }}
live_migration_permit_post_copy = {{ nova_live_migration_permit_post_copy }}

{% if nova_ephemeral_backend == 'ceph' %}
#ceph
rbd_user = {{ nova_ephemeral_ceph_user }}
rbd_secret_uuid = {{ nova_ephemeral_volume_secret_uuid }}
images_type = rbd
images_rbd_pool = {{ nova_ephemeral_ceph_pool }}
images_rbd_ceph_conf = /etc/ceph/{{ ceph_cluster_name }}.conf
hw_disk_discard = unmap
{% endif %}

{% elif nova_compute_driver == 'ironic.IronicDriver' %}
[ironic]

auth_type = password
auth_url = {{ keystone_proto }}://{{ keystone_admin_address }}:5000
admin_user={{ ironic_admin_user }}
admin_password = {{ ironic_admin_password }}
admin_tenant_name = {{ ironic_project_name }}

user_domain_name = {{ ironic_domain_name }}
username = {{ ironic_admin_user }}
password = {{ ironic_admin_password }}
project_domain_name = {{ ironic_project_domain_name }}
project_name = {{ ironic_project_name }}

{% if SSLCACertificateFile != '' %}
cafile = {{ SSLCACertificateFile }}
{% endif %}
insecure = {{ ssl_insecure }}
{% endif %}

{% endif %}
