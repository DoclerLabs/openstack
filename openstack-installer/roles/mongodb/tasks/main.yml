---

- name: Install mongodb packages
  apt: name={{ item }}
  with_items:
    - mongodb
    - python-pymongo

- name: deploy mongodb configuration
  template: src=mongodb.conf.j2 dest=/etc/mongodb.conf owner=mongodb group=root mode=0460
  notify: restart mongodb

- name: deploy mongodb keyfile
  copy: content='{{ mongodb_key }}' dest=/etc/mongodb.key owner=mongodb group=root mode=0400
  notify: restart mongodb

- meta: flush_handlers

- name: ensure mongodb is started
  service: name=mongodb state=started enabled=yes

- name: wait for mongodb up
  wait_for: port=27017

- name: query the replica set status
  command: mongo --quiet --eval 'rs.status().myState;'
  changed_when: False
  register: mongo_status

- set_fact: mongo_initialized=False

- name: determine if the replica set is already initialized
  set_fact: mongo_initialized=True
  when: hostvars[item].mongo_status.stdout != ''
  with_items: groups['mongodb']

- name: initialize replica set
  command: mongo --quiet --eval '{{ lookup('template','../templates/mongo_init.js.j2') }}'
  when: mongo_initialized == False
  run_once: True

- name: wait until the replica set is initialized
  command: mongo --quiet --eval 'rs.status().myState;'
  register: mongo_status
  run_once: True
  when: mongo_initialized == False
  until: mongo_status.stdout == '1'

- name: query the replica set status
  command: mongo --quiet --eval 'rs.status().myState;'
  changed_when: False
  register: mongo_status

- name: add missing members to the replica set
  command: mongo --quiet --eval 'rs.add("{{ item }}").ok'
  when: mongo_status.stdout == '1'
  register: mongo_result
  changed_when: mongo_result.stdout == '1'
  with_items: groups['mongodb']

- name: wait until the replica set is initialized
  command: mongo --quiet --eval 'rs.status().myState;'
  register: mongo_status
  until: mongo_status.stdout == '1' or mongo_status.stdout == '2'
  changed_when: False
  retries: 10
  delay: 5
